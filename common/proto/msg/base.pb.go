// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0
// source: msgproto/base.proto

package msg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoginType int32

const (
	LoginType_Gust          LoginType = 0
	LoginType_Account       LoginType = 1
	LoginType_TapTap        LoginType = 2
	LoginType_Facebook      LoginType = 3
	LoginType_Google        LoginType = 4
	LoginType_Fusion        LoginType = 5
	LoginType_LoginType_Max LoginType = 6
)

// Enum value maps for LoginType.
var (
	LoginType_name = map[int32]string{
		0: "Gust",
		1: "Account",
		2: "TapTap",
		3: "Facebook",
		4: "Google",
		5: "Fusion",
		6: "LoginType_Max",
	}
	LoginType_value = map[string]int32{
		"Gust":          0,
		"Account":       1,
		"TapTap":        2,
		"Facebook":      3,
		"Google":        4,
		"Fusion":        5,
		"LoginType_Max": 6,
	}
)

func (x LoginType) Enum() *LoginType {
	p := new(LoginType)
	*p = x
	return p
}

func (x LoginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginType) Descriptor() protoreflect.EnumDescriptor {
	return file_msgproto_base_proto_enumTypes[0].Descriptor()
}

func (LoginType) Type() protoreflect.EnumType {
	return &file_msgproto_base_proto_enumTypes[0]
}

func (x LoginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginType.Descriptor instead.
func (LoginType) EnumDescriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{0}
}

// 通用返回-用于功能被关闭时返回,注:需要所有返回消息结构第1个参数是ErrCode
type CommonRetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret ErrCode `protobuf:"varint,1,opt,name=Ret,proto3,enum=msg.ErrCode" json:"Ret,omitempty"` //非0失败
}

func (x *CommonRetData) Reset() {
	*x = CommonRetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonRetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRetData) ProtoMessage() {}

func (x *CommonRetData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRetData.ProtoReflect.Descriptor instead.
func (*CommonRetData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{0}
}

func (x *CommonRetData) GetRet() ErrCode {
	if x != nil {
		return x.Ret
	}
	return ErrCode_OK
}

type PassiveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassiveId    int32 `protobuf:"varint,1,opt,name=PassiveId,proto3" json:"PassiveId,omitempty"`       //被动ID
	PassiveLevel int32 `protobuf:"varint,2,opt,name=PassiveLevel,proto3" json:"PassiveLevel,omitempty"` //被动等级
	PassiveExp   int32 `protobuf:"varint,3,opt,name=PassiveExp,proto3" json:"PassiveExp,omitempty"`     //被动经验
}

func (x *PassiveData) Reset() {
	*x = PassiveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveData) ProtoMessage() {}

func (x *PassiveData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveData.ProtoReflect.Descriptor instead.
func (*PassiveData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{1}
}

func (x *PassiveData) GetPassiveId() int32 {
	if x != nil {
		return x.PassiveId
	}
	return 0
}

func (x *PassiveData) GetPassiveLevel() int32 {
	if x != nil {
		return x.PassiveLevel
	}
	return 0
}

func (x *PassiveData) GetPassiveExp() int32 {
	if x != nil {
		return x.PassiveExp
	}
	return 0
}

type SkillData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId    int32 `protobuf:"varint,1,opt,name=SkillId,proto3" json:"SkillId,omitempty"`
	SkillLevel int32 `protobuf:"varint,2,opt,name=SkillLevel,proto3" json:"SkillLevel,omitempty"`
}

func (x *SkillData) Reset() {
	*x = SkillData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillData) ProtoMessage() {}

func (x *SkillData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillData.ProtoReflect.Descriptor instead.
func (*SkillData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{2}
}

func (x *SkillData) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *SkillData) GetSkillLevel() int32 {
	if x != nil {
		return x.SkillLevel
	}
	return 0
}

type SkillPassiveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId         int32          `protobuf:"varint,1,opt,name=SkillId,proto3" json:"SkillId,omitempty"`                //技能ID
	PassiveList     []*PassiveData `protobuf:"bytes,2,rep,name=PassiveList,proto3" json:"PassiveList,omitempty"`         //生效被动列表
	TempPassiveList []*PassiveData `protobuf:"bytes,3,rep,name=TempPassiveList,proto3" json:"TempPassiveList,omitempty"` //临时被动列表
}

func (x *SkillPassiveData) Reset() {
	*x = SkillPassiveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillPassiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillPassiveData) ProtoMessage() {}

func (x *SkillPassiveData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillPassiveData.ProtoReflect.Descriptor instead.
func (*SkillPassiveData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{3}
}

func (x *SkillPassiveData) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *SkillPassiveData) GetPassiveList() []*PassiveData {
	if x != nil {
		return x.PassiveList
	}
	return nil
}

func (x *SkillPassiveData) GetTempPassiveList() []*PassiveData {
	if x != nil {
		return x.TempPassiveList
	}
	return nil
}

type FightPassiveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId     int32   `protobuf:"varint,1,opt,name=SkillId,proto3" json:"SkillId,omitempty"`                //技能ID
	PassiveList []int32 `protobuf:"varint,2,rep,packed,name=PassiveList,proto3" json:"PassiveList,omitempty"` //生效被动列表——配置表中的唯一ID
}

func (x *FightPassiveData) Reset() {
	*x = FightPassiveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPassiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPassiveData) ProtoMessage() {}

func (x *FightPassiveData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPassiveData.ProtoReflect.Descriptor instead.
func (*FightPassiveData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{4}
}

func (x *FightPassiveData) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *FightPassiveData) GetPassiveList() []int32 {
	if x != nil {
		return x.PassiveList
	}
	return nil
}

type TalentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"` //天赋组ID
	Level   int32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`     //天赋等级
}

func (x *TalentData) Reset() {
	*x = TalentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalentData) ProtoMessage() {}

func (x *TalentData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalentData.ProtoReflect.Descriptor instead.
func (*TalentData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{5}
}

func (x *TalentData) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *TalentData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type TalentPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`             //天赋方案名称
	TalentList []*TalentData `protobuf:"bytes,2,rep,name=TalentList,proto3" json:"TalentList,omitempty"` //天赋方案点
}

func (x *TalentPlan) Reset() {
	*x = TalentPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalentPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalentPlan) ProtoMessage() {}

func (x *TalentPlan) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalentPlan.ProtoReflect.Descriptor instead.
func (*TalentPlan) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{6}
}

func (x *TalentPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TalentPlan) GetTalentList() []*TalentData {
	if x != nil {
		return x.TalentList
	}
	return nil
}

type TalentClassicPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`             //天赋方案名称
	TalentList []*TalentData `protobuf:"bytes,2,rep,name=TalentList,proto3" json:"TalentList,omitempty"` //天赋方案点
}

func (x *TalentClassicPlan) Reset() {
	*x = TalentClassicPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalentClassicPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalentClassicPlan) ProtoMessage() {}

func (x *TalentClassicPlan) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalentClassicPlan.ProtoReflect.Descriptor instead.
func (*TalentClassicPlan) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{7}
}

func (x *TalentClassicPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TalentClassicPlan) GetTalentList() []*TalentData {
	if x != nil {
		return x.TalentList
	}
	return nil
}

type TamerTalentPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`             //天赋方案名称
	TalentList []*TalentData `protobuf:"bytes,2,rep,name=TalentList,proto3" json:"TalentList,omitempty"` //天赋方案点
}

func (x *TamerTalentPlan) Reset() {
	*x = TamerTalentPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamerTalentPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamerTalentPlan) ProtoMessage() {}

func (x *TamerTalentPlan) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamerTalentPlan.ProtoReflect.Descriptor instead.
func (*TamerTalentPlan) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{8}
}

func (x *TamerTalentPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TamerTalentPlan) GetTalentList() []*TalentData {
	if x != nil {
		return x.TalentList
	}
	return nil
}

type SkillLoadOtherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId              int32  `protobuf:"varint,1,opt,name=SkillId,proto3" json:"SkillId,omitempty"`                           //技能ID
	SkillSp              int32  `protobuf:"varint,2,opt,name=SkillSp,proto3" json:"SkillSp,omitempty"`                           //技能sp
	SkillNextCanCastTime int64  `protobuf:"varint,3,opt,name=SkillNextCanCastTime,proto3" json:"SkillNextCanCastTime,omitempty"` //技能下次可释放的时间戳 ms
	OverlayNum           int32  `protobuf:"varint,4,opt,name=OverlayNum,proto3" json:"OverlayNum,omitempty"`                     //叠加释放次数
	OverlayLastTime      int64  `protobuf:"varint,5,opt,name=OverlayLastTime,proto3" json:"OverlayLastTime,omitempty"`           //堆叠时间
	OwnerId              uint64 `protobuf:"varint,6,opt,name=OwnerId,proto3" json:"OwnerId,omitempty"`                           //技能拥有者Id
}

func (x *SkillLoadOtherData) Reset() {
	*x = SkillLoadOtherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillLoadOtherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillLoadOtherData) ProtoMessage() {}

func (x *SkillLoadOtherData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillLoadOtherData.ProtoReflect.Descriptor instead.
func (*SkillLoadOtherData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{9}
}

func (x *SkillLoadOtherData) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *SkillLoadOtherData) GetSkillSp() int32 {
	if x != nil {
		return x.SkillSp
	}
	return 0
}

func (x *SkillLoadOtherData) GetSkillNextCanCastTime() int64 {
	if x != nil {
		return x.SkillNextCanCastTime
	}
	return 0
}

func (x *SkillLoadOtherData) GetOverlayNum() int32 {
	if x != nil {
		return x.OverlayNum
	}
	return 0
}

func (x *SkillLoadOtherData) GetOverlayLastTime() int64 {
	if x != nil {
		return x.OverlayLastTime
	}
	return 0
}

func (x *SkillLoadOtherData) GetOwnerId() uint64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type MsgPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgPing) Reset() {
	*x = MsgPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPing) ProtoMessage() {}

func (x *MsgPing) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPing.ProtoReflect.Descriptor instead.
func (*MsgPing) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{10}
}

type MsgPong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowTime int64 `protobuf:"varint,1,opt,name=nowTime,proto3" json:"nowTime,omitempty"`
}

func (x *MsgPong) Reset() {
	*x = MsgPong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPong) ProtoMessage() {}

func (x *MsgPong) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPong.ProtoReflect.Descriptor instead.
func (*MsgPong) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{11}
}

func (x *MsgPong) GetNowTime() int64 {
	if x != nil {
		return x.NowTime
	}
	return 0
}

type MsgNil struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgNil) Reset() {
	*x = MsgNil{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgNil) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgNil) ProtoMessage() {}

func (x *MsgNil) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgNil.ProtoReflect.Descriptor instead.
func (*MsgNil) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{12}
}

type MapPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X     uint32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y     uint32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	MapId uint64 `protobuf:"varint,3,opt,name=mapId,proto3" json:"mapId,omitempty"`
}

func (x *MapPoint) Reset() {
	*x = MapPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapPoint) ProtoMessage() {}

func (x *MapPoint) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapPoint.ProtoReflect.Descriptor instead.
func (*MapPoint) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{13}
}

func (x *MapPoint) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MapPoint) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MapPoint) GetMapId() uint64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X uint32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y uint32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{14}
}

func (x *Point) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type DamageAddHp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackReply  int64 `protobuf:"varint,1,opt,name=AttackReply,proto3" json:"AttackReply,omitempty"`   //击中回复
	SuckingBlood int64 `protobuf:"varint,2,opt,name=SuckingBlood,proto3" json:"SuckingBlood,omitempty"` //吸血
}

func (x *DamageAddHp) Reset() {
	*x = DamageAddHp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DamageAddHp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamageAddHp) ProtoMessage() {}

func (x *DamageAddHp) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamageAddHp.ProtoReflect.Descriptor instead.
func (*DamageAddHp) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{15}
}

func (x *DamageAddHp) GetAttackReply() int64 {
	if x != nil {
		return x.AttackReply
	}
	return 0
}

func (x *DamageAddHp) GetSuckingBlood() int64 {
	if x != nil {
		return x.SuckingBlood
	}
	return 0
}

type CounteredDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DamageValue          int64 `protobuf:"varint,1,opt,name=DamageValue,proto3" json:"DamageValue,omitempty"`                   //反击伤害
	CounteredSurplusHp   int64 `protobuf:"varint,2,opt,name=CounteredSurplusHp,proto3" json:"CounteredSurplusHp,omitempty"`     //反击剩余血量
	CounteredShieldTimes int32 `protobuf:"varint,3,opt,name=CounteredShieldTimes,proto3" json:"CounteredShieldTimes,omitempty"` //次数护盾减少值
	CounteredShieldHp    int32 `protobuf:"varint,4,opt,name=CounteredShieldHp,proto3" json:"CounteredShieldHp,omitempty"`       //血量护盾减少值
}

func (x *CounteredDamage) Reset() {
	*x = CounteredDamage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounteredDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounteredDamage) ProtoMessage() {}

func (x *CounteredDamage) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounteredDamage.ProtoReflect.Descriptor instead.
func (*CounteredDamage) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{16}
}

func (x *CounteredDamage) GetDamageValue() int64 {
	if x != nil {
		return x.DamageValue
	}
	return 0
}

func (x *CounteredDamage) GetCounteredSurplusHp() int64 {
	if x != nil {
		return x.CounteredSurplusHp
	}
	return 0
}

func (x *CounteredDamage) GetCounteredShieldTimes() int32 {
	if x != nil {
		return x.CounteredShieldTimes
	}
	return 0
}

func (x *CounteredDamage) GetCounteredShieldHp() int32 {
	if x != nil {
		return x.CounteredShieldHp
	}
	return 0
}

type SkillNowCDChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId             uint64          `protobuf:"varint,1,opt,name=ObjId,proto3" json:"ObjId,omitempty"`                                                                                                                  //修改的对象ID 给谁减CD
	SkillCdRefreshMap map[int32]int64 `protobuf:"bytes,2,rep,name=SkillCdRefreshMap,proto3" json:"SkillCdRefreshMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //技能cd信息 map[技能ID]下次可释放的时间戳 ms
}

func (x *SkillNowCDChange) Reset() {
	*x = SkillNowCDChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillNowCDChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillNowCDChange) ProtoMessage() {}

func (x *SkillNowCDChange) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillNowCDChange.ProtoReflect.Descriptor instead.
func (*SkillNowCDChange) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{17}
}

func (x *SkillNowCDChange) GetObjId() uint64 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *SkillNowCDChange) GetSkillCdRefreshMap() map[int32]int64 {
	if x != nil {
		return x.SkillCdRefreshMap
	}
	return nil
}

type TargetDamages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId              uint64           `protobuf:"varint,1,opt,name=ObjId,proto3" json:"ObjId,omitempty"`                            //受伤对象ID
	Damages            int64            `protobuf:"varint,2,opt,name=Damages,proto3" json:"Damages,omitempty"`                        //伤害值  为负则是加血
	SurplusHp          int64            `protobuf:"varint,3,opt,name=SurplusHp,proto3" json:"SurplusHp,omitempty"`                    //剩余血量
	TableStatus        int32            `protobuf:"varint,4,opt,name=TableStatus,proto3" json:"TableStatus,omitempty"`                //伤害圆盘状态 0正常 1闪避 4暴击
	ShieldTimes        int32            `protobuf:"varint,7,opt,name=ShieldTimes,proto3" json:"ShieldTimes,omitempty"`                //次数护盾减少值
	ShieldHp           int32            `protobuf:"varint,8,opt,name=ShieldHp,proto3" json:"ShieldHp,omitempty"`                      //血量护盾减少值
	FromObjId          uint64           `protobuf:"varint,9,opt,name=FromObjId,proto3" json:"FromObjId,omitempty"`                    //伤害来源对象
	SkillId            int32            `protobuf:"varint,10,opt,name=SkillId,proto3" json:"SkillId,omitempty"`                       //伤害来源技能ID
	BuffId             int32            `protobuf:"varint,11,opt,name=BuffId,proto3" json:"BuffId,omitempty"`                         //伤害来源Buff ID
	ReboundDamage      int64            `protobuf:"varint,12,opt,name=ReboundDamage,proto3" json:"ReboundDamage,omitempty"`           //反伤，针对FromObjId
	ReboundSurplusHp   int64            `protobuf:"varint,13,opt,name=ReboundSurplusHp,proto3" json:"ReboundSurplusHp,omitempty"`     //剩余血量
	ReboundShieldTimes int32            `protobuf:"varint,14,opt,name=ReboundShieldTimes,proto3" json:"ReboundShieldTimes,omitempty"` //次数护盾减少值
	ReboundShieldHp    int32            `protobuf:"varint,15,opt,name=ReboundShieldHp,proto3" json:"ReboundShieldHp,omitempty"`       //血量护盾减少值
	AddHpInfo          *DamageAddHp     `protobuf:"bytes,16,opt,name=AddHpInfo,proto3" json:"AddHpInfo,omitempty"`                    //吸血及击中回复
	CounteredInfo      *CounteredDamage `protobuf:"bytes,17,opt,name=CounteredInfo,proto3" json:"CounteredInfo,omitempty"`            //反击伤害信息，针对FromObjId
	// 以下为debug模式才会发送的数据
	DebugSkillLevel int32 `protobuf:"varint,18,opt,name=DebugSkillLevel,proto3" json:"DebugSkillLevel,omitempty"` //伤害来源技能等级——仅在release模式下且是技能触发伤害时有值
	DebugSkillRatio int32 `protobuf:"varint,19,opt,name=DebugSkillRatio,proto3" json:"DebugSkillRatio,omitempty"` //伤害来源的技能倍率
	DebugSkillFix   int32 `protobuf:"varint,20,opt,name=DebugSkillFix,proto3" json:"DebugSkillFix,omitempty"`     //伤害来源的技能固定伤害值
	// 被动触发信息
	CasterTriggerPassive []int32 `protobuf:"varint,21,rep,packed,name=CasterTriggerPassive,proto3" json:"CasterTriggerPassive,omitempty"` //技能释放者触发的被动
	TargetTriggerPassive []int32 `protobuf:"varint,22,rep,packed,name=TargetTriggerPassive,proto3" json:"TargetTriggerPassive,omitempty"` //技能受击者触发的被动
}

func (x *TargetDamages) Reset() {
	*x = TargetDamages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetDamages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetDamages) ProtoMessage() {}

func (x *TargetDamages) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetDamages.ProtoReflect.Descriptor instead.
func (*TargetDamages) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{18}
}

func (x *TargetDamages) GetObjId() uint64 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *TargetDamages) GetDamages() int64 {
	if x != nil {
		return x.Damages
	}
	return 0
}

func (x *TargetDamages) GetSurplusHp() int64 {
	if x != nil {
		return x.SurplusHp
	}
	return 0
}

func (x *TargetDamages) GetTableStatus() int32 {
	if x != nil {
		return x.TableStatus
	}
	return 0
}

func (x *TargetDamages) GetShieldTimes() int32 {
	if x != nil {
		return x.ShieldTimes
	}
	return 0
}

func (x *TargetDamages) GetShieldHp() int32 {
	if x != nil {
		return x.ShieldHp
	}
	return 0
}

func (x *TargetDamages) GetFromObjId() uint64 {
	if x != nil {
		return x.FromObjId
	}
	return 0
}

func (x *TargetDamages) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *TargetDamages) GetBuffId() int32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *TargetDamages) GetReboundDamage() int64 {
	if x != nil {
		return x.ReboundDamage
	}
	return 0
}

func (x *TargetDamages) GetReboundSurplusHp() int64 {
	if x != nil {
		return x.ReboundSurplusHp
	}
	return 0
}

func (x *TargetDamages) GetReboundShieldTimes() int32 {
	if x != nil {
		return x.ReboundShieldTimes
	}
	return 0
}

func (x *TargetDamages) GetReboundShieldHp() int32 {
	if x != nil {
		return x.ReboundShieldHp
	}
	return 0
}

func (x *TargetDamages) GetAddHpInfo() *DamageAddHp {
	if x != nil {
		return x.AddHpInfo
	}
	return nil
}

func (x *TargetDamages) GetCounteredInfo() *CounteredDamage {
	if x != nil {
		return x.CounteredInfo
	}
	return nil
}

func (x *TargetDamages) GetDebugSkillLevel() int32 {
	if x != nil {
		return x.DebugSkillLevel
	}
	return 0
}

func (x *TargetDamages) GetDebugSkillRatio() int32 {
	if x != nil {
		return x.DebugSkillRatio
	}
	return 0
}

func (x *TargetDamages) GetDebugSkillFix() int32 {
	if x != nil {
		return x.DebugSkillFix
	}
	return 0
}

func (x *TargetDamages) GetCasterTriggerPassive() []int32 {
	if x != nil {
		return x.CasterTriggerPassive
	}
	return nil
}

func (x *TargetDamages) GetTargetTriggerPassive() []int32 {
	if x != nil {
		return x.TargetTriggerPassive
	}
	return nil
}

type ExecutorTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId  uint64 `protobuf:"varint,1,opt,name=TargetId,proto3" json:"TargetId,omitempty"`  //目标ID
	SrcObjId  uint64 `protobuf:"varint,2,opt,name=SrcObjId,proto3" json:"SrcObjId,omitempty"`  //源(发起者)ID
	SrcObjPos *Point `protobuf:"bytes,3,opt,name=SrcObjPos,proto3" json:"SrcObjPos,omitempty"` //源(发起者)位置
	// 附加字段
	// bool HitFly       = 4;  //是否有击飞
	// bool HitDown      = 5;  //是否有击倒
	TargetPos   *Point `protobuf:"bytes,6,opt,name=TargetPos,proto3" json:"TargetPos,omitempty"`      //目标位置
	TableStatus int32  `protobuf:"varint,7,opt,name=TableStatus,proto3" json:"TableStatus,omitempty"` //伤害圆盘状态 0正常 1闪避 2招架
}

func (x *ExecutorTarget) Reset() {
	*x = ExecutorTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutorTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorTarget) ProtoMessage() {}

func (x *ExecutorTarget) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorTarget.ProtoReflect.Descriptor instead.
func (*ExecutorTarget) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{19}
}

func (x *ExecutorTarget) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *ExecutorTarget) GetSrcObjId() uint64 {
	if x != nil {
		return x.SrcObjId
	}
	return 0
}

func (x *ExecutorTarget) GetSrcObjPos() *Point {
	if x != nil {
		return x.SrcObjPos
	}
	return nil
}

func (x *ExecutorTarget) GetTargetPos() *Point {
	if x != nil {
		return x.TargetPos
	}
	return nil
}

func (x *ExecutorTarget) GetTableStatus() int32 {
	if x != nil {
		return x.TableStatus
	}
	return 0
}

type MsgInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawData      []byte   `protobuf:"bytes,1,opt,name=RawData,proto3" json:"RawData,omitempty"`
	MsgType      int32    `protobuf:"varint,2,opt,name=MsgType,proto3" json:"MsgType,omitempty"`
	ListClientId []uint64 `protobuf:"varint,3,rep,packed,name=ListClientId,proto3" json:"ListClientId,omitempty"`
}

func (x *MsgInput) Reset() {
	*x = MsgInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgInput) ProtoMessage() {}

func (x *MsgInput) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgInput.ProtoReflect.Descriptor instead.
func (*MsgInput) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{20}
}

func (x *MsgInput) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *MsgInput) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *MsgInput) GetListClientId() []uint64 {
	if x != nil {
		return x.ListClientId
	}
	return nil
}

type ExecutorGroupId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId []int32 `protobuf:"varint,1,rep,packed,name=GroupId,proto3" json:"GroupId,omitempty"`
}

func (x *ExecutorGroupId) Reset() {
	*x = ExecutorGroupId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutorGroupId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorGroupId) ProtoMessage() {}

func (x *ExecutorGroupId) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorGroupId.ProtoReflect.Descriptor instead.
func (*ExecutorGroupId) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{21}
}

func (x *ExecutorGroupId) GetGroupId() []int32 {
	if x != nil {
		return x.GroupId
	}
	return nil
}

type EquipmentAdditional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjID     uint64           `protobuf:"varint,1,opt,name=ObjID,proto3" json:"ObjID,omitempty"`        //装备的对象的ID 0表示尚未装备
	EquipInfo *EquipAdditional `protobuf:"bytes,3,opt,name=EquipInfo,proto3" json:"EquipInfo,omitempty"` //装备数据
}

func (x *EquipmentAdditional) Reset() {
	*x = EquipmentAdditional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentAdditional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentAdditional) ProtoMessage() {}

func (x *EquipmentAdditional) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentAdditional.ProtoReflect.Descriptor instead.
func (*EquipmentAdditional) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{22}
}

func (x *EquipmentAdditional) GetObjID() uint64 {
	if x != nil {
		return x.ObjID
	}
	return 0
}

func (x *EquipmentAdditional) GetEquipInfo() *EquipAdditional {
	if x != nil {
		return x.EquipInfo
	}
	return nil
}

// 加点天赋
type TalentAdditional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseTalentPoint int32        `protobuf:"varint,1,opt,name=UseTalentPoint,proto3" json:"UseTalentPoint,omitempty"` //使用的点天赋
	TalentPlanData *TalentPlan  `protobuf:"bytes,3,opt,name=TalentPlanData,proto3" json:"TalentPlanData,omitempty"`  //天赋方案
	SkillList      []*SkillData `protobuf:"bytes,4,rep,name=SkillList,proto3" json:"SkillList,omitempty"`            //技能
}

func (x *TalentAdditional) Reset() {
	*x = TalentAdditional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalentAdditional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalentAdditional) ProtoMessage() {}

func (x *TalentAdditional) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalentAdditional.ProtoReflect.Descriptor instead.
func (*TalentAdditional) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{23}
}

func (x *TalentAdditional) GetUseTalentPoint() int32 {
	if x != nil {
		return x.UseTalentPoint
	}
	return 0
}

func (x *TalentAdditional) GetTalentPlanData() *TalentPlan {
	if x != nil {
		return x.TalentPlanData
	}
	return nil
}

func (x *TalentAdditional) GetSkillList() []*SkillData {
	if x != nil {
		return x.SkillList
	}
	return nil
}

// 经典天赋
type TalentClassicAdditional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseTalentPoint int32              `protobuf:"varint,1,opt,name=UseTalentPoint,proto3" json:"UseTalentPoint,omitempty"` //使用的点天赋
	UseTalentIndex int32              `protobuf:"varint,3,opt,name=UseTalentIndex,proto3" json:"UseTalentIndex,omitempty"` //使用的天赋方案index
	SkillList      []*SkillData       `protobuf:"bytes,4,rep,name=SkillList,proto3" json:"SkillList,omitempty"`            //技能
	TalentPlanData *TalentClassicPlan `protobuf:"bytes,5,opt,name=TalentPlanData,proto3" json:"TalentPlanData,omitempty"`  //天赋方案
}

func (x *TalentClassicAdditional) Reset() {
	*x = TalentClassicAdditional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalentClassicAdditional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalentClassicAdditional) ProtoMessage() {}

func (x *TalentClassicAdditional) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalentClassicAdditional.ProtoReflect.Descriptor instead.
func (*TalentClassicAdditional) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{24}
}

func (x *TalentClassicAdditional) GetUseTalentPoint() int32 {
	if x != nil {
		return x.UseTalentPoint
	}
	return 0
}

func (x *TalentClassicAdditional) GetUseTalentIndex() int32 {
	if x != nil {
		return x.UseTalentIndex
	}
	return 0
}

func (x *TalentClassicAdditional) GetSkillList() []*SkillData {
	if x != nil {
		return x.SkillList
	}
	return nil
}

func (x *TalentClassicAdditional) GetTalentPlanData() *TalentClassicPlan {
	if x != nil {
		return x.TalentPlanData
	}
	return nil
}

// TamerTalent
type TamerTalentAdditional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseTalentPoint int32            `protobuf:"varint,1,opt,name=UseTalentPoint,proto3" json:"UseTalentPoint,omitempty"` //使用的点天赋
	UseTalentIndex int32            `protobuf:"varint,3,opt,name=UseTalentIndex,proto3" json:"UseTalentIndex,omitempty"` //使用的天赋方案index
	SkillList      []*SkillData     `protobuf:"bytes,4,rep,name=SkillList,proto3" json:"SkillList,omitempty"`            //技能
	TalentPlanData *TamerTalentPlan `protobuf:"bytes,5,opt,name=TalentPlanData,proto3" json:"TalentPlanData,omitempty"`  //天赋方案
}

func (x *TamerTalentAdditional) Reset() {
	*x = TamerTalentAdditional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamerTalentAdditional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamerTalentAdditional) ProtoMessage() {}

func (x *TamerTalentAdditional) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamerTalentAdditional.ProtoReflect.Descriptor instead.
func (*TamerTalentAdditional) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{25}
}

func (x *TamerTalentAdditional) GetUseTalentPoint() int32 {
	if x != nil {
		return x.UseTalentPoint
	}
	return 0
}

func (x *TamerTalentAdditional) GetUseTalentIndex() int32 {
	if x != nil {
		return x.UseTalentIndex
	}
	return 0
}

func (x *TamerTalentAdditional) GetSkillList() []*SkillData {
	if x != nil {
		return x.SkillList
	}
	return nil
}

func (x *TamerTalentAdditional) GetTalentPlanData() *TamerTalentPlan {
	if x != nil {
		return x.TalentPlanData
	}
	return nil
}

type AttributeAddInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeType int32 `protobuf:"varint,1,opt,name=AttributeType,proto3" json:"AttributeType,omitempty"` // 属性类型
	Value         int64 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`                 // 值
	Percent       int32 `protobuf:"varint,3,opt,name=Percent,proto3" json:"Percent,omitempty"`             // 百分比
}

func (x *AttributeAddInfo) Reset() {
	*x = AttributeAddInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeAddInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeAddInfo) ProtoMessage() {}

func (x *AttributeAddInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeAddInfo.ProtoReflect.Descriptor instead.
func (*AttributeAddInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{26}
}

func (x *AttributeAddInfo) GetAttributeType() int32 {
	if x != nil {
		return x.AttributeType
	}
	return 0
}

func (x *AttributeAddInfo) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AttributeAddInfo) GetPercent() int32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type EquipPropertyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyId int32               `protobuf:"varint,1,opt,name=PropertyId,proto3" json:"PropertyId,omitempty"` //装备词条ID
	SpeAttrs   []*AttributeAddInfo `protobuf:"bytes,2,rep,name=SpeAttrs,proto3" json:"SpeAttrs,omitempty"`      //装备词条属性效果(客户端自己判断对谁生效,在EquipProperty.xlsx中的SpeAttrTarget列判断)
}

func (x *EquipPropertyInfo) Reset() {
	*x = EquipPropertyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPropertyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPropertyInfo) ProtoMessage() {}

func (x *EquipPropertyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPropertyInfo.ProtoReflect.Descriptor instead.
func (*EquipPropertyInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{27}
}

func (x *EquipPropertyInfo) GetPropertyId() int32 {
	if x != nil {
		return x.PropertyId
	}
	return 0
}

func (x *EquipPropertyInfo) GetSpeAttrs() []*AttributeAddInfo {
	if x != nil {
		return x.SpeAttrs
	}
	return nil
}

// 装备词条信息
type EquipPropertys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyArray []*EquipPropertyInfo `protobuf:"bytes,1,rep,name=PropertyArray,proto3" json:"PropertyArray,omitempty"` //装备词条信息
}

func (x *EquipPropertys) Reset() {
	*x = EquipPropertys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPropertys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPropertys) ProtoMessage() {}

func (x *EquipPropertys) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPropertys.ProtoReflect.Descriptor instead.
func (*EquipPropertys) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{28}
}

func (x *EquipPropertys) GetPropertyArray() []*EquipPropertyInfo {
	if x != nil {
		return x.PropertyArray
	}
	return nil
}

type EquipAdditional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAttr              []*AttributeAddInfo       `protobuf:"bytes,1,rep,name=BaseAttr,proto3" json:"BaseAttr,omitempty"`                                                                                                // 装备增加的属性
	InFightSummonPetAttrs []*AttributeAddInfo       `protobuf:"bytes,2,rep,name=InFightSummonPetAttrs,proto3" json:"InFightSummonPetAttrs,omitempty"`                                                                      // 装备增加地图中出战宠属性
	MapProperty           map[int32]*EquipPropertys `protobuf:"bytes,3,rep,name=MapProperty,proto3" json:"MapProperty,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //装备词条 map<装备词条类型(对应keyword中的EEquipPropertyType),词条信息>
}

func (x *EquipAdditional) Reset() {
	*x = EquipAdditional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipAdditional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipAdditional) ProtoMessage() {}

func (x *EquipAdditional) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipAdditional.ProtoReflect.Descriptor instead.
func (*EquipAdditional) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{29}
}

func (x *EquipAdditional) GetBaseAttr() []*AttributeAddInfo {
	if x != nil {
		return x.BaseAttr
	}
	return nil
}

func (x *EquipAdditional) GetInFightSummonPetAttrs() []*AttributeAddInfo {
	if x != nil {
		return x.InFightSummonPetAttrs
	}
	return nil
}

func (x *EquipAdditional) GetMapProperty() map[int32]*EquipPropertys {
	if x != nil {
		return x.MapProperty
	}
	return nil
}

type WarShipEquipProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyType int32 `protobuf:"varint,1,opt,name=PropertyType,proto3" json:"PropertyType,omitempty"` //性格相关词条
	Value        int32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`               //值
}

func (x *WarShipEquipProperty) Reset() {
	*x = WarShipEquipProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarShipEquipProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarShipEquipProperty) ProtoMessage() {}

func (x *WarShipEquipProperty) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarShipEquipProperty.ProtoReflect.Descriptor instead.
func (*WarShipEquipProperty) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{30}
}

func (x *WarShipEquipProperty) GetPropertyType() int32 {
	if x != nil {
		return x.PropertyType
	}
	return 0
}

func (x *WarShipEquipProperty) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type WarShipEquipPassive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassiveEffectId int32 `protobuf:"varint,1,opt,name=PassiveEffectId,proto3" json:"PassiveEffectId,omitempty"` //被动效果ID
	PassiveLevel    int32 `protobuf:"varint,2,opt,name=PassiveLevel,proto3" json:"PassiveLevel,omitempty"`       //被动等级
	ObjectType      int32 `protobuf:"varint,3,opt,name=ObjectType,proto3" json:"ObjectType,omitempty"`           //生效对象类型 玩家or宠物 0表示都生效 对应keywords中EObjectType
}

func (x *WarShipEquipPassive) Reset() {
	*x = WarShipEquipPassive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarShipEquipPassive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarShipEquipPassive) ProtoMessage() {}

func (x *WarShipEquipPassive) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarShipEquipPassive.ProtoReflect.Descriptor instead.
func (*WarShipEquipPassive) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{31}
}

func (x *WarShipEquipPassive) GetPassiveEffectId() int32 {
	if x != nil {
		return x.PassiveEffectId
	}
	return 0
}

func (x *WarShipEquipPassive) GetPassiveLevel() int32 {
	if x != nil {
		return x.PassiveLevel
	}
	return 0
}

func (x *WarShipEquipPassive) GetObjectType() int32 {
	if x != nil {
		return x.ObjectType
	}
	return 0
}

type WarShipEquipmentAdditional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEquip      bool                    `protobuf:"varint,1,opt,name=IsEquip,proto3" json:"IsEquip,omitempty"`          //是否装备
	LockState    bool                    `protobuf:"varint,2,opt,name=LockState,proto3" json:"LockState,omitempty"`      //是否被锁定,false没有锁定 true锁定
	PropertyList []*WarShipEquipProperty `protobuf:"bytes,3,rep,name=PropertyList,proto3" json:"PropertyList,omitempty"` //舰船装备的性格相关词条
	PassiveList  []*WarShipEquipPassive  `protobuf:"bytes,4,rep,name=PassiveList,proto3" json:"PassiveList,omitempty"`   //舰船装备的被动词条
}

func (x *WarShipEquipmentAdditional) Reset() {
	*x = WarShipEquipmentAdditional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarShipEquipmentAdditional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarShipEquipmentAdditional) ProtoMessage() {}

func (x *WarShipEquipmentAdditional) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarShipEquipmentAdditional.ProtoReflect.Descriptor instead.
func (*WarShipEquipmentAdditional) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{32}
}

func (x *WarShipEquipmentAdditional) GetIsEquip() bool {
	if x != nil {
		return x.IsEquip
	}
	return false
}

func (x *WarShipEquipmentAdditional) GetLockState() bool {
	if x != nil {
		return x.LockState
	}
	return false
}

func (x *WarShipEquipmentAdditional) GetPropertyList() []*WarShipEquipProperty {
	if x != nil {
		return x.PropertyList
	}
	return nil
}

func (x *WarShipEquipmentAdditional) GetPassiveList() []*WarShipEquipPassive {
	if x != nil {
		return x.PassiveList
	}
	return nil
}

type GoodsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsType int32 `protobuf:"varint,1,opt,name=GoodsType,proto3" json:"GoodsType,omitempty"` //商品类型 参见keywords-GoodsTypeEnum
	GoodsId   int32 `protobuf:"varint,2,opt,name=GoodsId,proto3" json:"GoodsId,omitempty"`     //商品ID
	Count     int32 `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`         //数量
	Flag      int32 `protobuf:"varint,4,opt,name=Flag,proto3" json:"Flag,omitempty"`           //标志，1表示是宠物自动转化来的
}

func (x *GoodsInfo) Reset() {
	*x = GoodsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsInfo) ProtoMessage() {}

func (x *GoodsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsInfo.ProtoReflect.Descriptor instead.
func (*GoodsInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{33}
}

func (x *GoodsInfo) GetGoodsType() int32 {
	if x != nil {
		return x.GoodsType
	}
	return 0
}

func (x *GoodsInfo) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *GoodsInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GoodsInfo) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

// 血统因子信息
type BloodlineAdditional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockState            bool                `protobuf:"varint,1,opt,name=LockState,proto3" json:"LockState,omitempty"`                       //是否被锁定,false没有锁定 true锁定
	BloodlineEquipSuitId int32               `protobuf:"varint,2,opt,name=BloodlineEquipSuitId,proto3" json:"BloodlineEquipSuitId,omitempty"` //血统因子套装Id 0为没有套装
	Level                int32               `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`                               //血统因子等级
	Exp                  int32               `protobuf:"varint,4,opt,name=Exp,proto3" json:"Exp,omitempty"`                                   //血统因子经验
	EquipPetObjId        uint64              `protobuf:"varint,5,opt,name=EquipPetObjId,proto3" json:"EquipPetObjId,omitempty"`               //安装此血统因子的宠物唯一Id(为0表示没有被安装)
	EquipPosIdx          int32               `protobuf:"varint,6,opt,name=EquipPosIdx,proto3" json:"EquipPosIdx,omitempty"`                   //安装的血统因子槽位下标(只有EquipPetObjId>0时才有效)
	BaseAttr             []*AttributeAddInfo `protobuf:"bytes,7,rep,name=BaseAttr,proto3" json:"BaseAttr,omitempty"`                          // 装备增加的属性
	PropertyList         []int32             `protobuf:"varint,8,rep,packed,name=PropertyList,proto3" json:"PropertyList,omitempty"`          // 装备增加的词条
	SFXPropertyList      []int32             `protobuf:"varint,9,rep,packed,name=SFXPropertyList,proto3" json:"SFXPropertyList,omitempty"`    // 特性装备增加的词条
}

func (x *BloodlineAdditional) Reset() {
	*x = BloodlineAdditional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BloodlineAdditional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BloodlineAdditional) ProtoMessage() {}

func (x *BloodlineAdditional) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BloodlineAdditional.ProtoReflect.Descriptor instead.
func (*BloodlineAdditional) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{34}
}

func (x *BloodlineAdditional) GetLockState() bool {
	if x != nil {
		return x.LockState
	}
	return false
}

func (x *BloodlineAdditional) GetBloodlineEquipSuitId() int32 {
	if x != nil {
		return x.BloodlineEquipSuitId
	}
	return 0
}

func (x *BloodlineAdditional) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BloodlineAdditional) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *BloodlineAdditional) GetEquipPetObjId() uint64 {
	if x != nil {
		return x.EquipPetObjId
	}
	return 0
}

func (x *BloodlineAdditional) GetEquipPosIdx() int32 {
	if x != nil {
		return x.EquipPosIdx
	}
	return 0
}

func (x *BloodlineAdditional) GetBaseAttr() []*AttributeAddInfo {
	if x != nil {
		return x.BaseAttr
	}
	return nil
}

func (x *BloodlineAdditional) GetPropertyList() []int32 {
	if x != nil {
		return x.PropertyList
	}
	return nil
}

func (x *BloodlineAdditional) GetSFXPropertyList() []int32 {
	if x != nil {
		return x.SFXPropertyList
	}
	return nil
}

type ItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemObjId            uint64                      `protobuf:"varint,1,opt,name=ItemObjId,proto3" json:"ItemObjId,omitempty"`                      //道具ID
	ItemCfgId            int32                       `protobuf:"varint,2,opt,name=ItemCfgId,proto3" json:"ItemCfgId,omitempty"`                      //道具配置ID
	ItemType             int32                       `protobuf:"varint,3,opt,name=ItemType,proto3" json:"ItemType,omitempty"`                        //道具类型
	ItemCount            int32                       `protobuf:"varint,4,opt,name=ItemCount,proto3" json:"ItemCount,omitempty"`                      //道具数量
	EquipmentInfo        *EquipmentAdditional        `protobuf:"bytes,5,opt,name=EquipmentInfo,proto3" json:"EquipmentInfo,omitempty"`               //装备附加信息-仅装备才有
	BloodlineEquipsInfo  *BloodlineAdditional        `protobuf:"bytes,6,opt,name=BloodlineEquipsInfo,proto3" json:"BloodlineEquipsInfo,omitempty"`   //血统因子信息-仅血统因子才有
	WarShipEquipmentInfo *WarShipEquipmentAdditional `protobuf:"bytes,7,opt,name=WarShipEquipmentInfo,proto3" json:"WarShipEquipmentInfo,omitempty"` //舰船装备信息—仅舰船装备才有 keywords中41~54
	ShopPrice            int64                       `protobuf:"varint,8,opt,name=ShopPrice,proto3" json:"ShopPrice,omitempty"`                      //物品的商品价格，为0说明不是商店买的
}

func (x *ItemInfo) Reset() {
	*x = ItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInfo) ProtoMessage() {}

func (x *ItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInfo.ProtoReflect.Descriptor instead.
func (*ItemInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{35}
}

func (x *ItemInfo) GetItemObjId() uint64 {
	if x != nil {
		return x.ItemObjId
	}
	return 0
}

func (x *ItemInfo) GetItemCfgId() int32 {
	if x != nil {
		return x.ItemCfgId
	}
	return 0
}

func (x *ItemInfo) GetItemType() int32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *ItemInfo) GetItemCount() int32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (x *ItemInfo) GetEquipmentInfo() *EquipmentAdditional {
	if x != nil {
		return x.EquipmentInfo
	}
	return nil
}

func (x *ItemInfo) GetBloodlineEquipsInfo() *BloodlineAdditional {
	if x != nil {
		return x.BloodlineEquipsInfo
	}
	return nil
}

func (x *ItemInfo) GetWarShipEquipmentInfo() *WarShipEquipmentAdditional {
	if x != nil {
		return x.WarShipEquipmentInfo
	}
	return nil
}

func (x *ItemInfo) GetShopPrice() int64 {
	if x != nil {
		return x.ShopPrice
	}
	return 0
}

// 宠物亲密度信息
type PetIntimateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetId            uint64 `protobuf:"varint,1,opt,name=PetId,proto3" json:"PetId,omitempty"`                       //宠物ID
	IntimateNewLevel uint32 `protobuf:"varint,2,opt,name=IntimateNewLevel,proto3" json:"IntimateNewLevel,omitempty"` //宠物当前的亲密度等级
	IntimateExp      uint32 `protobuf:"varint,3,opt,name=IntimateExp,proto3" json:"IntimateExp,omitempty"`           //宠物亲密度经验
}

func (x *PetIntimateInfo) Reset() {
	*x = PetIntimateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetIntimateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetIntimateInfo) ProtoMessage() {}

func (x *PetIntimateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetIntimateInfo.ProtoReflect.Descriptor instead.
func (*PetIntimateInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{36}
}

func (x *PetIntimateInfo) GetPetId() uint64 {
	if x != nil {
		return x.PetId
	}
	return 0
}

func (x *PetIntimateInfo) GetIntimateNewLevel() uint32 {
	if x != nil {
		return x.IntimateNewLevel
	}
	return 0
}

func (x *PetIntimateInfo) GetIntimateExp() uint32 {
	if x != nil {
		return x.IntimateExp
	}
	return 0
}

// 宠物性格词条属性信息
type CharacterPropertyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyState bool             `protobuf:"varint,1,opt,name=PropertyState,proto3" json:"PropertyState,omitempty"`                                                                                //是否解锁 true已解锁 false未解锁
	Property      map[uint32]int32 `protobuf:"bytes,2,rep,name=Property,proto3" json:"Property,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //性格词条属性 词条ID=>性格词条属性信息
}

func (x *CharacterPropertyInfo) Reset() {
	*x = CharacterPropertyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterPropertyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterPropertyInfo) ProtoMessage() {}

func (x *CharacterPropertyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterPropertyInfo.ProtoReflect.Descriptor instead.
func (*CharacterPropertyInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{37}
}

func (x *CharacterPropertyInfo) GetPropertyState() bool {
	if x != nil {
		return x.PropertyState
	}
	return false
}

func (x *CharacterPropertyInfo) GetProperty() map[uint32]int32 {
	if x != nil {
		return x.Property
	}
	return nil
}

// 宠物性格信息
type PetCharacterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId    uint32                           `protobuf:"varint,1,opt,name=CharacterId,proto3" json:"CharacterId,omitempty"`                                                                                             //性格ID
	CharacterState int32                            `protobuf:"varint,2,opt,name=CharacterState,proto3" json:"CharacterState,omitempty"`                                                                                       //状态 见keyword中的PetCharacterSiteStateType
	PropertyGroup  map[int32]*CharacterPropertyInfo `protobuf:"bytes,3,rep,name=PropertyGroup,proto3" json:"PropertyGroup,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //性格词条属性 组ID(从0开始)=>性格词条组信息
}

func (x *PetCharacterInfo) Reset() {
	*x = PetCharacterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetCharacterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetCharacterInfo) ProtoMessage() {}

func (x *PetCharacterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetCharacterInfo.ProtoReflect.Descriptor instead.
func (*PetCharacterInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{38}
}

func (x *PetCharacterInfo) GetCharacterId() uint32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *PetCharacterInfo) GetCharacterState() int32 {
	if x != nil {
		return x.CharacterState
	}
	return 0
}

func (x *PetCharacterInfo) GetPropertyGroup() map[int32]*CharacterPropertyInfo {
	if x != nil {
		return x.PropertyGroup
	}
	return nil
}

// 宠物奖励信息
type PetAwardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetId         uint64            `protobuf:"varint,1,opt,name=PetId,proto3" json:"PetId,omitempty"`                //宠物ID
	Exp           int32             `protobuf:"varint,2,opt,name=Exp,proto3" json:"Exp,omitempty"`                    //宠物经验
	Intimate      int32             `protobuf:"varint,3,opt,name=Intimate,proto3" json:"Intimate,omitempty"`          //宠物亲密度
	CharacterInfo *PetCharacterInfo `protobuf:"bytes,4,opt,name=CharacterInfo,proto3" json:"CharacterInfo,omitempty"` //性格信息
}

func (x *PetAwardInfo) Reset() {
	*x = PetAwardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetAwardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetAwardInfo) ProtoMessage() {}

func (x *PetAwardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetAwardInfo.ProtoReflect.Descriptor instead.
func (*PetAwardInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{39}
}

func (x *PetAwardInfo) GetPetId() uint64 {
	if x != nil {
		return x.PetId
	}
	return 0
}

func (x *PetAwardInfo) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *PetAwardInfo) GetIntimate() int32 {
	if x != nil {
		return x.Intimate
	}
	return 0
}

func (x *PetAwardInfo) GetCharacterInfo() *PetCharacterInfo {
	if x != nil {
		return x.CharacterInfo
	}
	return nil
}

// 血统因子(血统装备)信息  血统因子被动信息根据血统配置和血统等级算出来,防止策划改的血统因子的被动
type BloodlineEquipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCfgId            int32  `protobuf:"varint,1,opt,name=ItemCfgId,proto3" json:"ItemCfgId,omitempty"`                       //血统因子配置ID
	EquipPosIdx          int32  `protobuf:"varint,2,opt,name=EquipPosIdx,proto3" json:"EquipPosIdx,omitempty"`                   //血统因子安装的下标
	Level                int32  `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`                               //血统因子等级
	Exp                  int32  `protobuf:"varint,4,opt,name=Exp,proto3" json:"Exp,omitempty"`                                   //血统因子经验
	BloodlineEquipSuitId int32  `protobuf:"varint,5,opt,name=BloodlineEquipSuitId,proto3" json:"BloodlineEquipSuitId,omitempty"` //血统因子套装Id 0为没有套装
	ItemObjId            uint64 `protobuf:"varint,6,opt,name=ItemObjId,proto3" json:"ItemObjId,omitempty"`                       //血统因子唯一ID(为0表示是初始因子)
}

func (x *BloodlineEquipInfo) Reset() {
	*x = BloodlineEquipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BloodlineEquipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BloodlineEquipInfo) ProtoMessage() {}

func (x *BloodlineEquipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BloodlineEquipInfo.ProtoReflect.Descriptor instead.
func (*BloodlineEquipInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{40}
}

func (x *BloodlineEquipInfo) GetItemCfgId() int32 {
	if x != nil {
		return x.ItemCfgId
	}
	return 0
}

func (x *BloodlineEquipInfo) GetEquipPosIdx() int32 {
	if x != nil {
		return x.EquipPosIdx
	}
	return 0
}

func (x *BloodlineEquipInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BloodlineEquipInfo) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *BloodlineEquipInfo) GetBloodlineEquipSuitId() int32 {
	if x != nil {
		return x.BloodlineEquipSuitId
	}
	return 0
}

func (x *BloodlineEquipInfo) GetItemObjId() uint64 {
	if x != nil {
		return x.ItemObjId
	}
	return 0
}

type BloodlineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BloodlineLevel          int32                         `protobuf:"varint,1,opt,name=BloodlineLevel,proto3" json:"BloodlineLevel,omitempty"`                                                                               //血统等级
	BloodlineStep           int32                         `protobuf:"varint,2,opt,name=BloodlineStep,proto3" json:"BloodlineStep,omitempty"`                                                                                 //血统小段
	TotalFailAwakenAddValue int32                         `protobuf:"varint,3,opt,name=TotalFailAwakenAddValue,proto3" json:"TotalFailAwakenAddValue,omitempty"`                                                             //觉醒失败累计增加的概率值 这是个数值需要除幻能等级表中的觉醒值就是概率
	EquipInfo               map[int32]*BloodlineEquipInfo `protobuf:"bytes,4,rep,name=EquipInfo,proto3" json:"EquipInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //血统因子信息 key:血统因子安装的下标
}

func (x *BloodlineInfo) Reset() {
	*x = BloodlineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BloodlineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BloodlineInfo) ProtoMessage() {}

func (x *BloodlineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BloodlineInfo.ProtoReflect.Descriptor instead.
func (*BloodlineInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{41}
}

func (x *BloodlineInfo) GetBloodlineLevel() int32 {
	if x != nil {
		return x.BloodlineLevel
	}
	return 0
}

func (x *BloodlineInfo) GetBloodlineStep() int32 {
	if x != nil {
		return x.BloodlineStep
	}
	return 0
}

func (x *BloodlineInfo) GetTotalFailAwakenAddValue() int32 {
	if x != nil {
		return x.TotalFailAwakenAddValue
	}
	return 0
}

func (x *BloodlineInfo) GetEquipInfo() map[int32]*BloodlineEquipInfo {
	if x != nil {
		return x.EquipInfo
	}
	return nil
}

type PetMoodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoodValue int32 `protobuf:"varint,1,opt,name=MoodValue,proto3" json:"MoodValue,omitempty"` //心情值
}

func (x *PetMoodInfo) Reset() {
	*x = PetMoodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetMoodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetMoodInfo) ProtoMessage() {}

func (x *PetMoodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetMoodInfo.ProtoReflect.Descriptor instead.
func (*PetMoodInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{42}
}

func (x *PetMoodInfo) GetMoodValue() int32 {
	if x != nil {
		return x.MoodValue
	}
	return 0
}

// 宠物单向资质信息
type PotentialElementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomPotential       int32 `protobuf:"varint,1,opt,name=RandomPotential,proto3" json:"RandomPotential,omitempty"`             //随机资质
	IsFire                bool  `protobuf:"varint,2,opt,name=IsFire,proto3" json:"IsFire,omitempty"`                               //随机资质是否是爆区
	PotentialPill         int32 `protobuf:"varint,3,opt,name=PotentialPill,proto3" json:"PotentialPill,omitempty"`                 //资质丹加成资质
	PotentialPillUseCount int32 `protobuf:"varint,4,opt,name=PotentialPillUseCount,proto3" json:"PotentialPillUseCount,omitempty"` //资质丹使用次数
}

func (x *PotentialElementInfo) Reset() {
	*x = PotentialElementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotentialElementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotentialElementInfo) ProtoMessage() {}

func (x *PotentialElementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotentialElementInfo.ProtoReflect.Descriptor instead.
func (*PotentialElementInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{43}
}

func (x *PotentialElementInfo) GetRandomPotential() int32 {
	if x != nil {
		return x.RandomPotential
	}
	return 0
}

func (x *PotentialElementInfo) GetIsFire() bool {
	if x != nil {
		return x.IsFire
	}
	return false
}

func (x *PotentialElementInfo) GetPotentialPill() int32 {
	if x != nil {
		return x.PotentialPill
	}
	return 0
}

func (x *PotentialElementInfo) GetPotentialPillUseCount() int32 {
	if x != nil {
		return x.PotentialPillUseCount
	}
	return 0
}

// 宠物洗练信息
type PetWashInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetWashPotentialCount int32 `protobuf:"varint,1,opt,name=PetWashPotentialCount,proto3" json:"PetWashPotentialCount,omitempty"` //宠物在5品时洗练次数-保底次数
	PetWashValue          int32 `protobuf:"varint,2,opt,name=PetWashValue,proto3" json:"PetWashValue,omitempty"`                   //当前洗练值
	// 以下是洗练未保存的洗练信息
	WashQuality      int32                           `protobuf:"varint,3,opt,name=WashQuality,proto3" json:"WashQuality,omitempty"`                                                                                                    //宠物洗练的品质
	WashPropertyInfo map[int32]bool                  `protobuf:"bytes,4,rep,name=WashPropertyInfo,proto3" json:"WashPropertyInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //宠物洗练的词条信息 map[词条Id]是否是打书的词条
	WashPotential    map[int32]*PotentialElementInfo `protobuf:"bytes,5,rep,name=WashPotential,proto3" json:"WashPotential,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`        //宠物洗练的资质信息 <资质类型，资质信息>
}

func (x *PetWashInfo) Reset() {
	*x = PetWashInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetWashInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetWashInfo) ProtoMessage() {}

func (x *PetWashInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetWashInfo.ProtoReflect.Descriptor instead.
func (*PetWashInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{44}
}

func (x *PetWashInfo) GetPetWashPotentialCount() int32 {
	if x != nil {
		return x.PetWashPotentialCount
	}
	return 0
}

func (x *PetWashInfo) GetPetWashValue() int32 {
	if x != nil {
		return x.PetWashValue
	}
	return 0
}

func (x *PetWashInfo) GetWashQuality() int32 {
	if x != nil {
		return x.WashQuality
	}
	return 0
}

func (x *PetWashInfo) GetWashPropertyInfo() map[int32]bool {
	if x != nil {
		return x.WashPropertyInfo
	}
	return nil
}

func (x *PetWashInfo) GetWashPotential() map[int32]*PotentialElementInfo {
	if x != nil {
		return x.WashPotential
	}
	return nil
}

// 宠物资质信息
type PetPotentialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapPotential      map[int32]*PotentialElementInfo `protobuf:"bytes,1,rep,name=MapPotential,proto3" json:"MapPotential,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //宠物资质信息 <资质类型，资质信息>
	WashInfo          *PetWashInfo                    `protobuf:"bytes,2,opt,name=WashInfo,proto3" json:"WashInfo,omitempty"`                                                                                                  //宠物洗练信息
	InnerPillUseCount int32                           `protobuf:"varint,3,opt,name=InnerPillUseCount,proto3" json:"InnerPillUseCount,omitempty"`                                                                               //内丹使用个数
}

func (x *PetPotentialInfo) Reset() {
	*x = PetPotentialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetPotentialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetPotentialInfo) ProtoMessage() {}

func (x *PetPotentialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetPotentialInfo.ProtoReflect.Descriptor instead.
func (*PetPotentialInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{45}
}

func (x *PetPotentialInfo) GetMapPotential() map[int32]*PotentialElementInfo {
	if x != nil {
		return x.MapPotential
	}
	return nil
}

func (x *PetPotentialInfo) GetWashInfo() *PetWashInfo {
	if x != nil {
		return x.WashInfo
	}
	return nil
}

func (x *PetPotentialInfo) GetInnerPillUseCount() int32 {
	if x != nil {
		return x.InnerPillUseCount
	}
	return 0
}

type PetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                      `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                                                                                                       //唯一ID
	PetConfigId         int32                       `protobuf:"varint,2,opt,name=PetConfigId,proto3" json:"PetConfigId,omitempty"`                                                                                                     //宠物ID
	MapAttribute        map[int32]int64             `protobuf:"bytes,3,rep,name=MapAttribute,proto3" json:"MapAttribute,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`          //宠物属性
	EquipIndex          int32                       `protobuf:"varint,4,opt,name=EquipIndex,proto3" json:"EquipIndex,omitempty"`                                                                                                       //宠物上阵位置
	MergeSkill          *SkillData                  `protobuf:"bytes,5,opt,name=MergeSkill,proto3" json:"MergeSkill,omitempty"`                                                                                                        //宠物连携技能
	SkillGroup          []*SkillData                `protobuf:"bytes,6,rep,name=SkillGroup,proto3" json:"SkillGroup,omitempty"`                                                                                                        //宠物技能组
	PotentialInfo       *PetPotentialInfo           `protobuf:"bytes,7,opt,name=PotentialInfo,proto3" json:"PotentialInfo,omitempty"`                                                                                                  //宠物资质信息
	Collect             bool                        `protobuf:"varint,8,opt,name=Collect,proto3" json:"Collect,omitempty"`                                                                                                             //是否收藏
	CharacterInfo       []*PetCharacterInfo         `protobuf:"bytes,9,rep,name=CharacterInfo,proto3" json:"CharacterInfo,omitempty"`                                                                                                  //宠物性格信息 宠物性格ID->性格信息
	MapSkillPassive     map[int32]*SkillPassiveData `protobuf:"bytes,10,rep,name=MapSkillPassive,proto3" json:"MapSkillPassive,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`    //被动 技能ID->被动信息 技能ID=0 表示宠物自身被动
	Quality             int32                       `protobuf:"varint,11,opt,name=Quality,proto3" json:"Quality,omitempty"`                                                                                                            //宠物品阶/品质
	NickName            string                      `protobuf:"bytes,12,opt,name=NickName,proto3" json:"NickName,omitempty"`                                                                                                           //宠物昵称,可能为空
	Sex                 int32                       `protobuf:"varint,13,opt,name=Sex,proto3" json:"Sex,omitempty"`                                                                                                                    //宠物性别 参照keywords——SexType
	GetTime             int64                       `protobuf:"varint,14,opt,name=GetTime,proto3" json:"GetTime,omitempty"`                                                                                                            //宠物获得时间,时间戳,单位毫秒
	IntimateLevel       uint32                      `protobuf:"varint,15,opt,name=IntimateLevel,proto3" json:"IntimateLevel,omitempty"`                                                                                                //宠物亲密度等级
	IntimateExp         uint32                      `protobuf:"varint,16,opt,name=IntimateExp,proto3" json:"IntimateExp,omitempty"`                                                                                                    //宠物亲密度经验
	IntimateDayLimit    map[int32]int32             `protobuf:"bytes,17,rep,name=IntimateDayLimit,proto3" json:"IntimateDayLimit,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //亲密度增加每日限制
	FoodModeChangeValue int32                       `protobuf:"varint,18,opt,name=FoodModeChangeValue,proto3" json:"FoodModeChangeValue,omitempty"`                                                                                    //喂养食物改变模型大小值
	Bloodline           *BloodlineInfo              `protobuf:"bytes,19,opt,name=Bloodline,proto3" json:"Bloodline,omitempty"`                                                                                                         //血统信息
	Mood                *PetMoodInfo                `protobuf:"bytes,20,opt,name=Mood,proto3" json:"Mood,omitempty"`                                                                                                                   //宠物心情信息
	// 上阵后的宠物才有的数据
	ExitTime                 int64           `protobuf:"varint,21,opt,name=ExitTime,proto3" json:"ExitTime,omitempty"`                                                                                                                          //宠物下场的时间 ms时间戳
	ExitHp                   int64           `protobuf:"varint,22,opt,name=ExitHp,proto3" json:"ExitHp,omitempty"`                                                                                                                              //宠物下场时的血量
	IsDie                    bool            `protobuf:"varint,23,opt,name=IsDie,proto3" json:"IsDie,omitempty"`                                                                                                                                //是否死亡
	InitNickName             string          `protobuf:"bytes,24,opt,name=InitNickName,proto3" json:"InitNickName,omitempty"`                                                                                                                   //初始昵称后缀
	MapFoodBuff              map[int32]int64 `protobuf:"bytes,25,rep,name=MapFoodBuff,proto3" json:"MapFoodBuff,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                           //食物增加的临时buff信息 map<buff唯一Id,结束时间戳-单位毫秒>
	MapFoodAdditionAttribute map[int32]int64 `protobuf:"bytes,26,rep,name=MapFoodAdditionAttribute,proto3" json:"MapFoodAdditionAttribute,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //食物属性加成信息 map<属性类型,属性值>
	InBornSparInfo           *MsgSparInfo    `protobuf:"bytes,27,opt,name=InBornSparInfo,proto3" json:"InBornSparInfo,omitempty"`                                                                                                               //天生能力晶石信息,是否生效取决于宠物天生能力晶石槽位是否解锁(也就是说槽位没有解锁也会发下来)
	FeedCount                int32           `protobuf:"varint,28,opt,name=FeedCount,proto3" json:"FeedCount,omitempty"`                                                                                                                        //喂养次数
	PetPropertyInfo          map[int32]bool  `protobuf:"bytes,29,rep,name=PetPropertyInfo,proto3" json:"PetPropertyInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                   //宠物词条信息 map<词条Id,是否是打书的词条>
	SpiritLevel              int32           `protobuf:"varint,30,opt,name=SpiritLevel,proto3" json:"SpiritLevel,omitempty"`                                                                                                                    //宠物灵阶
}

func (x *PetInfo) Reset() {
	*x = PetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetInfo) ProtoMessage() {}

func (x *PetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetInfo.ProtoReflect.Descriptor instead.
func (*PetInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{46}
}

func (x *PetInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PetInfo) GetPetConfigId() int32 {
	if x != nil {
		return x.PetConfigId
	}
	return 0
}

func (x *PetInfo) GetMapAttribute() map[int32]int64 {
	if x != nil {
		return x.MapAttribute
	}
	return nil
}

func (x *PetInfo) GetEquipIndex() int32 {
	if x != nil {
		return x.EquipIndex
	}
	return 0
}

func (x *PetInfo) GetMergeSkill() *SkillData {
	if x != nil {
		return x.MergeSkill
	}
	return nil
}

func (x *PetInfo) GetSkillGroup() []*SkillData {
	if x != nil {
		return x.SkillGroup
	}
	return nil
}

func (x *PetInfo) GetPotentialInfo() *PetPotentialInfo {
	if x != nil {
		return x.PotentialInfo
	}
	return nil
}

func (x *PetInfo) GetCollect() bool {
	if x != nil {
		return x.Collect
	}
	return false
}

func (x *PetInfo) GetCharacterInfo() []*PetCharacterInfo {
	if x != nil {
		return x.CharacterInfo
	}
	return nil
}

func (x *PetInfo) GetMapSkillPassive() map[int32]*SkillPassiveData {
	if x != nil {
		return x.MapSkillPassive
	}
	return nil
}

func (x *PetInfo) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *PetInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *PetInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *PetInfo) GetGetTime() int64 {
	if x != nil {
		return x.GetTime
	}
	return 0
}

func (x *PetInfo) GetIntimateLevel() uint32 {
	if x != nil {
		return x.IntimateLevel
	}
	return 0
}

func (x *PetInfo) GetIntimateExp() uint32 {
	if x != nil {
		return x.IntimateExp
	}
	return 0
}

func (x *PetInfo) GetIntimateDayLimit() map[int32]int32 {
	if x != nil {
		return x.IntimateDayLimit
	}
	return nil
}

func (x *PetInfo) GetFoodModeChangeValue() int32 {
	if x != nil {
		return x.FoodModeChangeValue
	}
	return 0
}

func (x *PetInfo) GetBloodline() *BloodlineInfo {
	if x != nil {
		return x.Bloodline
	}
	return nil
}

func (x *PetInfo) GetMood() *PetMoodInfo {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *PetInfo) GetExitTime() int64 {
	if x != nil {
		return x.ExitTime
	}
	return 0
}

func (x *PetInfo) GetExitHp() int64 {
	if x != nil {
		return x.ExitHp
	}
	return 0
}

func (x *PetInfo) GetIsDie() bool {
	if x != nil {
		return x.IsDie
	}
	return false
}

func (x *PetInfo) GetInitNickName() string {
	if x != nil {
		return x.InitNickName
	}
	return ""
}

func (x *PetInfo) GetMapFoodBuff() map[int32]int64 {
	if x != nil {
		return x.MapFoodBuff
	}
	return nil
}

func (x *PetInfo) GetMapFoodAdditionAttribute() map[int32]int64 {
	if x != nil {
		return x.MapFoodAdditionAttribute
	}
	return nil
}

func (x *PetInfo) GetInBornSparInfo() *MsgSparInfo {
	if x != nil {
		return x.InBornSparInfo
	}
	return nil
}

func (x *PetInfo) GetFeedCount() int32 {
	if x != nil {
		return x.FeedCount
	}
	return 0
}

func (x *PetInfo) GetPetPropertyInfo() map[int32]bool {
	if x != nil {
		return x.PetPropertyInfo
	}
	return nil
}

func (x *PetInfo) GetSpiritLevel() int32 {
	if x != nil {
		return x.SpiritLevel
	}
	return 0
}

// 宠物基础数据
type PetBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetObjId       uint64 `protobuf:"varint,1,opt,name=PetObjId,proto3" json:"PetObjId,omitempty"`             // 宠物唯一Id
	PetCfgId       int32  `protobuf:"varint,2,opt,name=PetCfgId,proto3" json:"PetCfgId,omitempty"`             // 宠物ConfigId
	Level          int32  `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`                   // 等级
	Quality        int32  `protobuf:"varint,4,opt,name=Quality,proto3" json:"Quality,omitempty"`               // 品质
	BloodlineLevel int32  `protobuf:"varint,5,opt,name=BloodlineLevel,proto3" json:"BloodlineLevel,omitempty"` // 血统幻能等级
	EquipIndex     int32  `protobuf:"varint,6,opt,name=EquipIndex,proto3" json:"EquipIndex,omitempty"`         // 宠物上阵位置
}

func (x *PetBaseInfo) Reset() {
	*x = PetBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetBaseInfo) ProtoMessage() {}

func (x *PetBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetBaseInfo.ProtoReflect.Descriptor instead.
func (*PetBaseInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{47}
}

func (x *PetBaseInfo) GetPetObjId() uint64 {
	if x != nil {
		return x.PetObjId
	}
	return 0
}

func (x *PetBaseInfo) GetPetCfgId() int32 {
	if x != nil {
		return x.PetCfgId
	}
	return 0
}

func (x *PetBaseInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PetBaseInfo) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *PetBaseInfo) GetBloodlineLevel() int32 {
	if x != nil {
		return x.BloodlineLevel
	}
	return 0
}

func (x *PetBaseInfo) GetEquipIndex() int32 {
	if x != nil {
		return x.EquipIndex
	}
	return 0
}

type AttributeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeType  int32 `protobuf:"varint,1,opt,name=AttributeType,proto3" json:"AttributeType,omitempty"`   //属性类型
	AttributeValue int64 `protobuf:"varint,2,opt,name=AttributeValue,proto3" json:"AttributeValue,omitempty"` //属性值
}

func (x *AttributeInfo) Reset() {
	*x = AttributeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeInfo) ProtoMessage() {}

func (x *AttributeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeInfo.ProtoReflect.Descriptor instead.
func (*AttributeInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{48}
}

func (x *AttributeInfo) GetAttributeType() int32 {
	if x != nil {
		return x.AttributeType
	}
	return 0
}

func (x *AttributeInfo) GetAttributeValue() int64 {
	if x != nil {
		return x.AttributeValue
	}
	return 0
}

type AttrChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeValue int64 `protobuf:"varint,1,opt,name=ChangeValue,proto3" json:"ChangeValue,omitempty"` //修改的实数值
	ChangeRatio int32 `protobuf:"varint,2,opt,name=ChangeRatio,proto3" json:"ChangeRatio,omitempty"` //修改的万分比
}

func (x *AttrChange) Reset() {
	*x = AttrChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrChange) ProtoMessage() {}

func (x *AttrChange) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrChange.ProtoReflect.Descriptor instead.
func (*AttrChange) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{49}
}

func (x *AttrChange) GetChangeValue() int64 {
	if x != nil {
		return x.ChangeValue
	}
	return 0
}

func (x *AttrChange) GetChangeRatio() int32 {
	if x != nil {
		return x.ChangeRatio
	}
	return 0
}

type BuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId              uint64                `protobuf:"varint,1,opt,name=ObjectId,proto3" json:"ObjectId,omitempty"`                                                                                                                     // buff被施加者ID
	CastId                uint64                `protobuf:"varint,2,opt,name=CastId,proto3" json:"CastId,omitempty"`                                                                                                                         // buff施加者ID
	CastType              int32                 `protobuf:"varint,3,opt,name=CastType,proto3" json:"CastType,omitempty"`                                                                                                                     // buff施加者类型
	Id                    uint64                `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`                                                                                                                                 //服务器生成的buff随机唯一ID
	BuffKey               uint32                `protobuf:"varint,5,opt,name=BuffKey,proto3" json:"BuffKey,omitempty"`                                                                                                                       // buff配置中的BuffKey
	StartTime             int64                 `protobuf:"varint,6,opt,name=StartTime,proto3" json:"StartTime,omitempty"`                                                                                                                   //开始时间-毫秒级时间戳
	TableStatus           int32                 `protobuf:"varint,7,opt,name=TableStatus,proto3" json:"TableStatus,omitempty"`                                                                                                               //0正常命中 1免疫 2抵抗
	Duration              int64                 `protobuf:"varint,8,opt,name=Duration,proto3" json:"Duration,omitempty"`                                                                                                                     //持续时间ms
	AccumulationCount     int32                 `protobuf:"varint,9,opt,name=AccumulationCount,proto3" json:"AccumulationCount,omitempty"`                                                                                                   //层数
	BuffAttrChangeMap     map[int32]*AttrChange `protobuf:"bytes,10,rep,name=BuffAttrChangeMap,proto3" json:"BuffAttrChangeMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`          //属性变化——仅在受被动影响时有
	CasterAttrAdditionMap map[int32]int64       `protobuf:"bytes,11,rep,name=CasterAttrAdditionMap,proto3" json:"CasterAttrAdditionMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //释放者额外增加属性 map[属性类型]属性值
}

func (x *BuffInfo) Reset() {
	*x = BuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffInfo) ProtoMessage() {}

func (x *BuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffInfo.ProtoReflect.Descriptor instead.
func (*BuffInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{50}
}

func (x *BuffInfo) GetObjectId() uint64 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *BuffInfo) GetCastId() uint64 {
	if x != nil {
		return x.CastId
	}
	return 0
}

func (x *BuffInfo) GetCastType() int32 {
	if x != nil {
		return x.CastType
	}
	return 0
}

func (x *BuffInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BuffInfo) GetBuffKey() uint32 {
	if x != nil {
		return x.BuffKey
	}
	return 0
}

func (x *BuffInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BuffInfo) GetTableStatus() int32 {
	if x != nil {
		return x.TableStatus
	}
	return 0
}

func (x *BuffInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BuffInfo) GetAccumulationCount() int32 {
	if x != nil {
		return x.AccumulationCount
	}
	return 0
}

func (x *BuffInfo) GetBuffAttrChangeMap() map[int32]*AttrChange {
	if x != nil {
		return x.BuffAttrChangeMap
	}
	return nil
}

func (x *BuffInfo) GetCasterAttrAdditionMap() map[int32]int64 {
	if x != nil {
		return x.CasterAttrAdditionMap
	}
	return nil
}

type RemoveBuffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId uint64   `protobuf:"varint,1,opt,name=ObjectId,proto3" json:"ObjectId,omitempty"` // buff被施加者ID
	Id       []uint64 `protobuf:"varint,2,rep,packed,name=Id,proto3" json:"Id,omitempty"`      //服务器生成的buff随机唯一ID
}

func (x *RemoveBuffInfo) Reset() {
	*x = RemoveBuffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBuffInfo) ProtoMessage() {}

func (x *RemoveBuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBuffInfo.ProtoReflect.Descriptor instead.
func (*RemoveBuffInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{51}
}

func (x *RemoveBuffInfo) GetObjectId() uint64 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *RemoveBuffInfo) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type TalentPointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipmentId uint64 `protobuf:"varint,1,opt,name=EquipmentId,proto3" json:"EquipmentId,omitempty"` //装备的唯一ID，若0表示公用天赋点
	Count       int32  `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`             //数量——总量
}

func (x *TalentPointInfo) Reset() {
	*x = TalentPointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalentPointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalentPointInfo) ProtoMessage() {}

func (x *TalentPointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalentPointInfo.ProtoReflect.Descriptor instead.
func (*TalentPointInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{52}
}

func (x *TalentPointInfo) GetEquipmentId() uint64 {
	if x != nil {
		return x.EquipmentId
	}
	return 0
}

func (x *TalentPointInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 宠物等级信息
type PetLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetId              uint64          `protobuf:"varint,1,opt,name=PetId,proto3" json:"PetId,omitempty"`                                                                                                                    //宠物ID
	MapUpdateAttribute map[int32]int64 `protobuf:"bytes,2,rep,name=MapUpdateAttribute,proto3" json:"MapUpdateAttribute,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //宠物属性更新,等级和经验不是差值
	AddExp             int64           `protobuf:"varint,3,opt,name=AddExp,proto3" json:"AddExp,omitempty"`                                                                                                                  //增加的经验
}

func (x *PetLevelInfo) Reset() {
	*x = PetLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetLevelInfo) ProtoMessage() {}

func (x *PetLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetLevelInfo.ProtoReflect.Descriptor instead.
func (*PetLevelInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{53}
}

func (x *PetLevelInfo) GetPetId() uint64 {
	if x != nil {
		return x.PetId
	}
	return 0
}

func (x *PetLevelInfo) GetMapUpdateAttribute() map[int32]int64 {
	if x != nil {
		return x.MapUpdateAttribute
	}
	return nil
}

func (x *PetLevelInfo) GetAddExp() int64 {
	if x != nil {
		return x.AddExp
	}
	return 0
}

// 能量
type EnergyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Energy                 int32 `protobuf:"varint,1,opt,name=Energy,proto3" json:"Energy,omitempty"`                                 //能量
	LastEnergyRecoveryTime int64 `protobuf:"varint,2,opt,name=LastEnergyRecoveryTime,proto3" json:"LastEnergyRecoveryTime,omitempty"` //能量最后恢复时间
}

func (x *EnergyInfo) Reset() {
	*x = EnergyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyInfo) ProtoMessage() {}

func (x *EnergyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyInfo.ProtoReflect.Descriptor instead.
func (*EnergyInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{54}
}

func (x *EnergyInfo) GetEnergy() int32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *EnergyInfo) GetLastEnergyRecoveryTime() int64 {
	if x != nil {
		return x.LastEnergyRecoveryTime
	}
	return 0
}

// DropGoodsInfo
type NotifyItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsType   int32              `protobuf:"varint,1,opt,name=GoodsType,proto3" json:"GoodsType,omitempty"`    //掉落类型 参见keywords-GoodsTypeEnum
	Item        *ItemInfo          `protobuf:"bytes,2,opt,name=Item,proto3" json:"Item,omitempty"`               //掉落的道具
	Attribute   *AttributeInfo     `protobuf:"bytes,3,opt,name=Attribute,proto3" json:"Attribute,omitempty"`     //掉落的属性
	Pet         *PetInfo           `protobuf:"bytes,4,opt,name=Pet,proto3" json:"Pet,omitempty"`                 //掉落的宠物
	Talent      *TalentPointInfo   `protobuf:"bytes,5,opt,name=Talent,proto3" json:"Talent,omitempty"`           //掉落的加点天赋点
	Task        []int32            `protobuf:"varint,6,rep,packed,name=Task,proto3" json:"Task,omitempty"`       //掉落的任务
	PetLevel    []*PetLevelInfo    `protobuf:"bytes,7,rep,name=PetLevel,proto3" json:"PetLevel,omitempty"`       //宠物等级信息,当GoodsType为属性,AttributeType为宠物经验时需要处理这条
	PetIntimate []*PetIntimateInfo `protobuf:"bytes,8,rep,name=PetIntimate,proto3" json:"PetIntimate,omitempty"` //宠物添加亲密度后的信息
	// repeated PetMoodNotifyInfo PetMood      = 9;  //宠物添加心情后信息
	Energy     *EnergyInfo `protobuf:"bytes,10,opt,name=Energy,proto3" json:"Energy,omitempty"`          //能量
	ActionId   int32       `protobuf:"varint,11,opt,name=ActionId,proto3" json:"ActionId,omitempty"`     //营地动作
	CookbookId int32       `protobuf:"varint,12,opt,name=CookbookId,proto3" json:"CookbookId,omitempty"` //食谱Id
}

func (x *NotifyItemInfo) Reset() {
	*x = NotifyItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyItemInfo) ProtoMessage() {}

func (x *NotifyItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyItemInfo.ProtoReflect.Descriptor instead.
func (*NotifyItemInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{55}
}

func (x *NotifyItemInfo) GetGoodsType() int32 {
	if x != nil {
		return x.GoodsType
	}
	return 0
}

func (x *NotifyItemInfo) GetItem() *ItemInfo {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *NotifyItemInfo) GetAttribute() *AttributeInfo {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *NotifyItemInfo) GetPet() *PetInfo {
	if x != nil {
		return x.Pet
	}
	return nil
}

func (x *NotifyItemInfo) GetTalent() *TalentPointInfo {
	if x != nil {
		return x.Talent
	}
	return nil
}

func (x *NotifyItemInfo) GetTask() []int32 {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *NotifyItemInfo) GetPetLevel() []*PetLevelInfo {
	if x != nil {
		return x.PetLevel
	}
	return nil
}

func (x *NotifyItemInfo) GetPetIntimate() []*PetIntimateInfo {
	if x != nil {
		return x.PetIntimate
	}
	return nil
}

func (x *NotifyItemInfo) GetEnergy() *EnergyInfo {
	if x != nil {
		return x.Energy
	}
	return nil
}

func (x *NotifyItemInfo) GetActionId() int32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *NotifyItemInfo) GetCookbookId() int32 {
	if x != nil {
		return x.CookbookId
	}
	return 0
}

type StuffPosData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StuffId int32 `protobuf:"varint,1,opt,name=StuffId,proto3" json:"StuffId,omitempty"`
	PosID   int32 `protobuf:"varint,2,opt,name=PosID,proto3" json:"PosID,omitempty"`
}

func (x *StuffPosData) Reset() {
	*x = StuffPosData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StuffPosData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StuffPosData) ProtoMessage() {}

func (x *StuffPosData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StuffPosData.ProtoReflect.Descriptor instead.
func (*StuffPosData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{56}
}

func (x *StuffPosData) GetStuffId() int32 {
	if x != nil {
		return x.StuffId
	}
	return 0
}

func (x *StuffPosData) GetPosID() int32 {
	if x != nil {
		return x.PosID
	}
	return 0
}

type UserMailData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailId          string       `protobuf:"bytes,1,opt,name=MailId,proto3" json:"MailId,omitempty"`                   //邮件id
	IsPublicMail    bool         `protobuf:"varint,2,opt,name=IsPublicMail,proto3" json:"IsPublicMail,omitempty"`      //是否为全服邮件
	FromUser        uint64       `protobuf:"varint,3,opt,name=FromUser,proto3" json:"FromUser,omitempty"`              //发送方User的ID
	Title           string       `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`                     //邮件标题
	Content         string       `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty"`                 //邮件内容
	ItemAttachments []*GoodsInfo `protobuf:"bytes,6,rep,name=ItemAttachments,proto3" json:"ItemAttachments,omitempty"` //道具附件
	SendTime        int64        `protobuf:"varint,7,opt,name=SendTime,proto3" json:"SendTime,omitempty"`              //发送时间戳
	ExpirationTime  int64        `protobuf:"varint,8,opt,name=ExpirationTime,proto3" json:"ExpirationTime,omitempty"`  //过期时间戳
	Status          int32        `protobuf:"varint,9,opt,name=Status,proto3" json:"Status,omitempty"`                  //邮件状态
	MailType        int32        `protobuf:"varint,10,opt,name=MailType,proto3" json:"MailType,omitempty"`             //邮件类型 对应keywords中EMailType
	MailOrder       uint64       `protobuf:"varint,11,opt,name=MailOrder,proto3" json:"MailOrder,omitempty"`           //流水：1）当为系统邮件时，表示邮件的配置ID 2）当为GM邮件时，表示发送GM邮件时GM后台产生的邮件ID 3）当为问卷调查邮件时，表示问卷调查ID
	ShowParamType   int32        `protobuf:"varint,12,opt,name=ShowParamType,proto3" json:"ShowParamType,omitempty"`   //内容显示的附加类型
	ShowParams      []string     `protobuf:"bytes,13,rep,name=ShowParams,proto3" json:"ShowParams,omitempty"`          //内容显示的附加参数
}

func (x *UserMailData) Reset() {
	*x = UserMailData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMailData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMailData) ProtoMessage() {}

func (x *UserMailData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMailData.ProtoReflect.Descriptor instead.
func (*UserMailData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{57}
}

func (x *UserMailData) GetMailId() string {
	if x != nil {
		return x.MailId
	}
	return ""
}

func (x *UserMailData) GetIsPublicMail() bool {
	if x != nil {
		return x.IsPublicMail
	}
	return false
}

func (x *UserMailData) GetFromUser() uint64 {
	if x != nil {
		return x.FromUser
	}
	return 0
}

func (x *UserMailData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UserMailData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UserMailData) GetItemAttachments() []*GoodsInfo {
	if x != nil {
		return x.ItemAttachments
	}
	return nil
}

func (x *UserMailData) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *UserMailData) GetExpirationTime() int64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

func (x *UserMailData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserMailData) GetMailType() int32 {
	if x != nil {
		return x.MailType
	}
	return 0
}

func (x *UserMailData) GetMailOrder() uint64 {
	if x != nil {
		return x.MailOrder
	}
	return 0
}

func (x *UserMailData) GetShowParamType() int32 {
	if x != nil {
		return x.ShowParamType
	}
	return 0
}

func (x *UserMailData) GetShowParams() []string {
	if x != nil {
		return x.ShowParams
	}
	return nil
}

// 玩家基础信息
type UserBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId          uint64 `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`                    //玩家ID
	PlayerName        string `protobuf:"bytes,2,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`                 //玩家名字
	PlayerLevel       int32  `protobuf:"varint,3,opt,name=PlayerLevel,proto3" json:"PlayerLevel,omitempty"`              //玩家等级
	GuildId           uint64 `protobuf:"varint,4,opt,name=GuildId,proto3" json:"GuildId,omitempty"`                      //玩家公会Id
	GuildName         string `protobuf:"bytes,5,opt,name=GuildName,proto3" json:"GuildName,omitempty"`                   //玩家公会名
	GuildIcon         string `protobuf:"bytes,6,opt,name=GuildIcon,proto3" json:"GuildIcon,omitempty"`                   //玩家公会Icon
	Position          int32  `protobuf:"varint,7,opt,name=Position,proto3" json:"Position,omitempty"`                    //玩家在公会的职位 对应keyowords中EGuildPositionType
	ArenaMaxRange     int32  `protobuf:"varint,8,opt,name=ArenaMaxRange,proto3" json:"ArenaMaxRange,omitempty"`          //玩家竞技场历史最高段位.最大大段,对应keywords中EArenaRange
	ArenaMaxNodeId    int32  `protobuf:"varint,9,opt,name=ArenaMaxNodeId,proto3" json:"ArenaMaxNodeId,omitempty"`        //玩家竞技场历史最高段位.最大小段
	HomeTaskChapterId int32  `protobuf:"varint,10,opt,name=HomeTaskChapterId,proto3" json:"HomeTaskChapterId,omitempty"` //神树目标章节(信仰等级)
}

func (x *UserBaseInfo) Reset() {
	*x = UserBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBaseInfo) ProtoMessage() {}

func (x *UserBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBaseInfo.ProtoReflect.Descriptor instead.
func (*UserBaseInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{58}
}

func (x *UserBaseInfo) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UserBaseInfo) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *UserBaseInfo) GetPlayerLevel() int32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

func (x *UserBaseInfo) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *UserBaseInfo) GetGuildName() string {
	if x != nil {
		return x.GuildName
	}
	return ""
}

func (x *UserBaseInfo) GetGuildIcon() string {
	if x != nil {
		return x.GuildIcon
	}
	return ""
}

func (x *UserBaseInfo) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *UserBaseInfo) GetArenaMaxRange() int32 {
	if x != nil {
		return x.ArenaMaxRange
	}
	return 0
}

func (x *UserBaseInfo) GetArenaMaxNodeId() int32 {
	if x != nil {
		return x.ArenaMaxNodeId
	}
	return 0
}

func (x *UserBaseInfo) GetHomeTaskChapterId() int32 {
	if x != nil {
		return x.HomeTaskChapterId
	}
	return 0
}

type AdditionalSp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyMode    int32 `protobuf:"varint,1,opt,name=ReplyMode,proto3" json:"ReplyMode,omitempty"`       //回复模式——参考keywords中的ESPReplyMode
	ReplySpValue int32 `protobuf:"varint,2,opt,name=ReplySpValue,proto3" json:"ReplySpValue,omitempty"` //回复的sp值
	SkillId      int32 `protobuf:"varint,3,opt,name=SkillId,proto3" json:"SkillId,omitempty"`           //触发的skill id
}

func (x *AdditionalSp) Reset() {
	*x = AdditionalSp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalSp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalSp) ProtoMessage() {}

func (x *AdditionalSp) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalSp.ProtoReflect.Descriptor instead.
func (*AdditionalSp) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{59}
}

func (x *AdditionalSp) GetReplyMode() int32 {
	if x != nil {
		return x.ReplyMode
	}
	return 0
}

func (x *AdditionalSp) GetReplySpValue() int32 {
	if x != nil {
		return x.ReplySpValue
	}
	return 0
}

func (x *AdditionalSp) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

type DynamicBlockPosInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dir     uint32 `protobuf:"varint,1,opt,name=Dir,proto3" json:"Dir,omitempty"` //方向角度0-360
	PosX    int32  `protobuf:"varint,2,opt,name=PosX,proto3" json:"PosX,omitempty"`
	PosY    int32  `protobuf:"varint,3,opt,name=PosY,proto3" json:"PosY,omitempty"`
	StuffId int32  `protobuf:"varint,4,opt,name=StuffId,proto3" json:"StuffId,omitempty"` //物件Id
}

func (x *DynamicBlockPosInfo) Reset() {
	*x = DynamicBlockPosInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicBlockPosInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicBlockPosInfo) ProtoMessage() {}

func (x *DynamicBlockPosInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicBlockPosInfo.ProtoReflect.Descriptor instead.
func (*DynamicBlockPosInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{60}
}

func (x *DynamicBlockPosInfo) GetDir() uint32 {
	if x != nil {
		return x.Dir
	}
	return 0
}

func (x *DynamicBlockPosInfo) GetPosX() int32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *DynamicBlockPosInfo) GetPosY() int32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *DynamicBlockPosInfo) GetStuffId() int32 {
	if x != nil {
		return x.StuffId
	}
	return 0
}

type PublicEnterMapResData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosX                int32  `protobuf:"varint,1,opt,name=PosX,proto3" json:"PosX,omitempty"`
	PosY                int32  `protobuf:"varint,2,opt,name=PosY,proto3" json:"PosY,omitempty"`
	Weather             uint32 `protobuf:"varint,3,opt,name=Weather,proto3" json:"Weather,omitempty"`                          //地图天气
	WeatherEndTime      int64  `protobuf:"varint,4,opt,name=WeatherEndTime,proto3" json:"WeatherEndTime,omitempty"`            //地图天气结束时间戳 0表示永久
	MusicId             int32  `protobuf:"varint,5,opt,name=MusicId,proto3" json:"MusicId,omitempty"`                          //音乐Id
	MapId               uint64 `protobuf:"varint,6,opt,name=MapId,proto3" json:"MapId,omitempty"`                              //地图ID
	PlayerNowHp         int64  `protobuf:"varint,7,opt,name=PlayerNowHp,proto3" json:"PlayerNowHp,omitempty"`                  //玩家当前血量
	PlayerLifeStatus    int32  `protobuf:"varint,8,opt,name=PlayerLifeStatus,proto3" json:"PlayerLifeStatus,omitempty"`        //玩家当前死亡存活状态
	Dir                 int32  `protobuf:"varint,9,opt,name=Dir,proto3" json:"Dir,omitempty"`                                  //面向
	MapStartTime        int64  `protobuf:"varint,10,opt,name=MapStartTime,proto3" json:"MapStartTime,omitempty"`               //地图开始时间
	LastManaReplyTime   int64  `protobuf:"varint,11,opt,name=LastManaReplyTime,proto3" json:"LastManaReplyTime,omitempty"`     //最后mana恢复时间
	PlayerNowMana       int64  `protobuf:"varint,12,opt,name=PlayerNowMana,proto3" json:"PlayerNowMana,omitempty"`             //当前Mana
	NowBrawn            int64  `protobuf:"varint,13,opt,name=NowBrawn,proto3" json:"NowBrawn,omitempty"`                       //当前体力
	ClientAiResumeTime  int64  `protobuf:"varint,14,opt,name=ClientAiResumeTime,proto3" json:"ClientAiResumeTime,omitempty"`   //恢复客户端AI时间
	ChoiceEffectIndex   int32  `protobuf:"varint,15,opt,name=ChoiceEffectIndex,proto3" json:"ChoiceEffectIndex,omitempty"`     //选择的能力的index,从0开始,未选择为-1
	MapStarted          bool   `protobuf:"varint,16,opt,name=MapStarted,proto3" json:"MapStarted,omitempty"`                   //地图是否已经开始
	ReviveCount         int32  `protobuf:"varint,17,opt,name=ReviveCount,proto3" json:"ReviveCount,omitempty"`                 //当前复活次数
	RivalRealPlayerId   uint64 `protobuf:"varint,18,opt,name=RivalRealPlayerId,proto3" json:"RivalRealPlayerId,omitempty"`     //对手真实ID
	RivalPlayerObjectId uint64 `protobuf:"varint,19,opt,name=RivalPlayerObjectId,proto3" json:"RivalPlayerObjectId,omitempty"` //对手玩家对象ID
}

func (x *PublicEnterMapResData) Reset() {
	*x = PublicEnterMapResData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicEnterMapResData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicEnterMapResData) ProtoMessage() {}

func (x *PublicEnterMapResData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicEnterMapResData.ProtoReflect.Descriptor instead.
func (*PublicEnterMapResData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{61}
}

func (x *PublicEnterMapResData) GetPosX() int32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *PublicEnterMapResData) GetPosY() int32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *PublicEnterMapResData) GetWeather() uint32 {
	if x != nil {
		return x.Weather
	}
	return 0
}

func (x *PublicEnterMapResData) GetWeatherEndTime() int64 {
	if x != nil {
		return x.WeatherEndTime
	}
	return 0
}

func (x *PublicEnterMapResData) GetMusicId() int32 {
	if x != nil {
		return x.MusicId
	}
	return 0
}

func (x *PublicEnterMapResData) GetMapId() uint64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *PublicEnterMapResData) GetPlayerNowHp() int64 {
	if x != nil {
		return x.PlayerNowHp
	}
	return 0
}

func (x *PublicEnterMapResData) GetPlayerLifeStatus() int32 {
	if x != nil {
		return x.PlayerLifeStatus
	}
	return 0
}

func (x *PublicEnterMapResData) GetDir() int32 {
	if x != nil {
		return x.Dir
	}
	return 0
}

func (x *PublicEnterMapResData) GetMapStartTime() int64 {
	if x != nil {
		return x.MapStartTime
	}
	return 0
}

func (x *PublicEnterMapResData) GetLastManaReplyTime() int64 {
	if x != nil {
		return x.LastManaReplyTime
	}
	return 0
}

func (x *PublicEnterMapResData) GetPlayerNowMana() int64 {
	if x != nil {
		return x.PlayerNowMana
	}
	return 0
}

func (x *PublicEnterMapResData) GetNowBrawn() int64 {
	if x != nil {
		return x.NowBrawn
	}
	return 0
}

func (x *PublicEnterMapResData) GetClientAiResumeTime() int64 {
	if x != nil {
		return x.ClientAiResumeTime
	}
	return 0
}

func (x *PublicEnterMapResData) GetChoiceEffectIndex() int32 {
	if x != nil {
		return x.ChoiceEffectIndex
	}
	return 0
}

func (x *PublicEnterMapResData) GetMapStarted() bool {
	if x != nil {
		return x.MapStarted
	}
	return false
}

func (x *PublicEnterMapResData) GetReviveCount() int32 {
	if x != nil {
		return x.ReviveCount
	}
	return 0
}

func (x *PublicEnterMapResData) GetRivalRealPlayerId() uint64 {
	if x != nil {
		return x.RivalRealPlayerId
	}
	return 0
}

func (x *PublicEnterMapResData) GetRivalPlayerObjectId() uint64 {
	if x != nil {
		return x.RivalPlayerObjectId
	}
	return 0
}

type GameTimeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour   int32 `protobuf:"varint,1,opt,name=Hour,proto3" json:"Hour,omitempty"`     // 游戏时间 小时
	Minute int32 `protobuf:"varint,2,opt,name=Minute,proto3" json:"Minute,omitempty"` // 分钟
	Second int32 `protobuf:"varint,3,opt,name=Second,proto3" json:"Second,omitempty"` // 秒
}

func (x *GameTimeItem) Reset() {
	*x = GameTimeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameTimeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTimeItem) ProtoMessage() {}

func (x *GameTimeItem) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTimeItem.ProtoReflect.Descriptor instead.
func (*GameTimeItem) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{62}
}

func (x *GameTimeItem) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *GameTimeItem) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *GameTimeItem) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type SellItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`               //道具唯一ID
	SellCount int32  `protobuf:"varint,2,opt,name=SellCount,proto3" json:"SellCount,omitempty"` //出售数量
}

func (x *SellItem) Reset() {
	*x = SellItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellItem) ProtoMessage() {}

func (x *SellItem) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellItem.ProtoReflect.Descriptor instead.
func (*SellItem) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{63}
}

func (x *SellItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SellItem) GetSellCount() int32 {
	if x != nil {
		return x.SellCount
	}
	return 0
}

type EquipSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipSlotId    int32 `protobuf:"varint,1,opt,name=EquipSlotId,proto3" json:"EquipSlotId,omitempty"`       //装备槽位ID
	EquipSlotLevel int32 `protobuf:"varint,2,opt,name=EquipSlotLevel,proto3" json:"EquipSlotLevel,omitempty"` //装备槽位等级
}

func (x *EquipSlot) Reset() {
	*x = EquipSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipSlot) ProtoMessage() {}

func (x *EquipSlot) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipSlot.ProtoReflect.Descriptor instead.
func (*EquipSlot) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{64}
}

func (x *EquipSlot) GetEquipSlotId() int32 {
	if x != nil {
		return x.EquipSlotId
	}
	return 0
}

func (x *EquipSlot) GetEquipSlotLevel() int32 {
	if x != nil {
		return x.EquipSlotLevel
	}
	return 0
}

type SurpriseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurpriseCfgId int32 `protobuf:"varint,1,opt,name=SurpriseCfgId,proto3" json:"SurpriseCfgId,omitempty"` //惊喜/意外配置ID
	SubUseCount   int32 `protobuf:"varint,2,opt,name=SubUseCount,proto3" json:"SubUseCount,omitempty"`     //剩余使用次数
	StartTime     int64 `protobuf:"varint,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`         //开始时间-ms
}

func (x *SurpriseData) Reset() {
	*x = SurpriseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurpriseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurpriseData) ProtoMessage() {}

func (x *SurpriseData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurpriseData.ProtoReflect.Descriptor instead.
func (*SurpriseData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{65}
}

func (x *SurpriseData) GetSurpriseCfgId() int32 {
	if x != nil {
		return x.SurpriseCfgId
	}
	return 0
}

func (x *SurpriseData) GetSubUseCount() int32 {
	if x != nil {
		return x.SubUseCount
	}
	return 0
}

func (x *SurpriseData) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type SurpriseTalkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId int32 `protobuf:"varint,1,opt,name=TalkId,proto3" json:"TalkId,omitempty"` //对话ID
	Count  int32 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`   //个数
}

func (x *SurpriseTalkData) Reset() {
	*x = SurpriseTalkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurpriseTalkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurpriseTalkData) ProtoMessage() {}

func (x *SurpriseTalkData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurpriseTalkData.ProtoReflect.Descriptor instead.
func (*SurpriseTalkData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{66}
}

func (x *SurpriseTalkData) GetTalkId() int32 {
	if x != nil {
		return x.TalkId
	}
	return 0
}

func (x *SurpriseTalkData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type HomeBuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeBuildingId    uint64 `protobuf:"varint,1,opt,name=HomeBuildingId,proto3" json:"HomeBuildingId,omitempty"`       //建筑唯一ID
	HomeBuildingCfgId int32  `protobuf:"varint,2,opt,name=HomeBuildingCfgId,proto3" json:"HomeBuildingCfgId,omitempty"` //建筑配置ID
	HomeBuildingLevel int32  `protobuf:"varint,3,opt,name=HomeBuildingLevel,proto3" json:"HomeBuildingLevel,omitempty"` //建筑等级
	PosX              int32  `protobuf:"varint,4,opt,name=PosX,proto3" json:"PosX,omitempty"`                           //建筑位置X
	PosY              int32  `protobuf:"varint,5,opt,name=PosY,proto3" json:"PosY,omitempty"`                           //建筑位置Y
	PlotId            uint32 `protobuf:"varint,6,opt,name=PlotId,proto3" json:"PlotId,omitempty"`                       //所属建筑用地
	StartLevelUpTime  int64  `protobuf:"varint,7,opt,name=StartLevelUpTime,proto3" json:"StartLevelUpTime,omitempty"`   //开始升级的时间
	// 当HomeBuildingLevel>ReceiveLevelReward 若StartLevelUpTime不为0,HomeBuildingLevel需要-1处理
	// 需要客户端自行判断下,是否有升级奖励,没有的话就不发消息了
	ReceiveLevelReward int32 `protobuf:"varint,8,opt,name=ReceiveLevelReward,proto3" json:"ReceiveLevelReward,omitempty"` //已经领取升级奖励的等级——递增
	// 以下为惊喜相关——ps:客户端看看，哪些不需要
	SurpriseCount        int32               `protobuf:"varint,9,opt,name=SurpriseCount,proto3" json:"SurpriseCount,omitempty"`               //今天惊喜产生的次数
	AccidentCount        int32               `protobuf:"varint,10,opt,name=AccidentCount,proto3" json:"AccidentCount,omitempty"`              //今天意外产生的次数
	SurpriseTalkList     []*SurpriseTalkData `protobuf:"bytes,11,rep,name=SurpriseTalkList,proto3" json:"SurpriseTalkList,omitempty"`         //尚未处理的惊喜/意外对话ID列表
	SurpriseAccidentList []*SurpriseData     `protobuf:"bytes,12,rep,name=SurpriseAccidentList,proto3" json:"SurpriseAccidentList,omitempty"` //生效的惊喜/意外ID列表
}

func (x *HomeBuildInfo) Reset() {
	*x = HomeBuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeBuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeBuildInfo) ProtoMessage() {}

func (x *HomeBuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeBuildInfo.ProtoReflect.Descriptor instead.
func (*HomeBuildInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{67}
}

func (x *HomeBuildInfo) GetHomeBuildingId() uint64 {
	if x != nil {
		return x.HomeBuildingId
	}
	return 0
}

func (x *HomeBuildInfo) GetHomeBuildingCfgId() int32 {
	if x != nil {
		return x.HomeBuildingCfgId
	}
	return 0
}

func (x *HomeBuildInfo) GetHomeBuildingLevel() int32 {
	if x != nil {
		return x.HomeBuildingLevel
	}
	return 0
}

func (x *HomeBuildInfo) GetPosX() int32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *HomeBuildInfo) GetPosY() int32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *HomeBuildInfo) GetPlotId() uint32 {
	if x != nil {
		return x.PlotId
	}
	return 0
}

func (x *HomeBuildInfo) GetStartLevelUpTime() int64 {
	if x != nil {
		return x.StartLevelUpTime
	}
	return 0
}

func (x *HomeBuildInfo) GetReceiveLevelReward() int32 {
	if x != nil {
		return x.ReceiveLevelReward
	}
	return 0
}

func (x *HomeBuildInfo) GetSurpriseCount() int32 {
	if x != nil {
		return x.SurpriseCount
	}
	return 0
}

func (x *HomeBuildInfo) GetAccidentCount() int32 {
	if x != nil {
		return x.AccidentCount
	}
	return 0
}

func (x *HomeBuildInfo) GetSurpriseTalkList() []*SurpriseTalkData {
	if x != nil {
		return x.SurpriseTalkList
	}
	return nil
}

func (x *HomeBuildInfo) GetSurpriseAccidentList() []*SurpriseData {
	if x != nil {
		return x.SurpriseAccidentList
	}
	return nil
}

type DrawPetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemainCount int32 `protobuf:"varint,1,opt,name=RemainCount,proto3" json:"RemainCount,omitempty"` // 剩余抽卡次数
}

func (x *DrawPetInfo) Reset() {
	*x = DrawPetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawPetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawPetInfo) ProtoMessage() {}

func (x *DrawPetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawPetInfo.ProtoReflect.Descriptor instead.
func (*DrawPetInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{68}
}

func (x *DrawPetInfo) GetRemainCount() int32 {
	if x != nil {
		return x.RemainCount
	}
	return 0
}

// NotifyDailyRefresh 通知每日刷新
type MsgNotifyDailyRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshWeekTask      bool  `protobuf:"varint,1,opt,name=RefreshWeekTask,proto3" json:"RefreshWeekTask,omitempty"`           //是否刷新每周任务 true刷新 false不刷新
	OnlineAwardType      int32 `protobuf:"varint,2,opt,name=OnlineAwardType,proto3" json:"OnlineAwardType,omitempty"`           //下一次领取在线时长奖励类型
	OnlineAwardStartTime int64 `protobuf:"varint,3,opt,name=OnlineAwardStartTime,proto3" json:"OnlineAwardStartTime,omitempty"` //在线时长奖励开始时间 单位:毫秒
}

func (x *MsgNotifyDailyRefresh) Reset() {
	*x = MsgNotifyDailyRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgNotifyDailyRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgNotifyDailyRefresh) ProtoMessage() {}

func (x *MsgNotifyDailyRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgNotifyDailyRefresh.ProtoReflect.Descriptor instead.
func (*MsgNotifyDailyRefresh) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{69}
}

func (x *MsgNotifyDailyRefresh) GetRefreshWeekTask() bool {
	if x != nil {
		return x.RefreshWeekTask
	}
	return false
}

func (x *MsgNotifyDailyRefresh) GetOnlineAwardType() int32 {
	if x != nil {
		return x.OnlineAwardType
	}
	return 0
}

func (x *MsgNotifyDailyRefresh) GetOnlineAwardStartTime() int64 {
	if x != nil {
		return x.OnlineAwardStartTime
	}
	return 0
}

// 玩家战斗统计数据
type FightStaticData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PetId                int32  `protobuf:"varint,1,opt,name=PetId,proto3" json:"PetId,omitempty"` // 如果是玩家这个是0 如果是宠物这个是PetConfigId
	Level                int32  `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	Damage               int64  `protobuf:"varint,3,opt,name=Damage,proto3" json:"Damage,omitempty"`                              // 造成的伤害值（累积）
	BearDamage           int64  `protobuf:"varint,4,opt,name=BearDamage,proto3" json:"BearDamage,omitempty"`                      // 承担伤害值（累积）
	Treated              int64  `protobuf:"varint,5,opt,name=Treated,proto3" json:"Treated,omitempty"`                            // 治疗量（累积）
	IsDeath              bool   `protobuf:"varint,6,opt,name=IsDeath,proto3" json:"IsDeath,omitempty"`                            // 是否死亡 true死亡 false没死
	DamageMax            int64  `protobuf:"varint,7,opt,name=DamageMax,proto3" json:"DamageMax,omitempty"`                        // 造成的伤害值（最大）
	BearDamageMax        int64  `protobuf:"varint,8,opt,name=BearDamageMax,proto3" json:"BearDamageMax,omitempty"`                // 承担伤害值（最大）
	TreatedMax           int64  `protobuf:"varint,9,opt,name=TreatedMax,proto3" json:"TreatedMax,omitempty"`                      // 治疗量（最大）
	BloodlineLevel       int32  `protobuf:"varint,10,opt,name=BloodlineLevel,proto3" json:"BloodlineLevel,omitempty"`             // 血统等级
	BattleScore          int64  `protobuf:"varint,11,opt,name=BattleScore,proto3" json:"BattleScore,omitempty"`                   // 战力
	ObjId                uint64 `protobuf:"varint,12,opt,name=ObjId,proto3" json:"ObjId,omitempty"`                               //玩家/宠物唯一ID
	KillNormal           int64  `protobuf:"varint,13,opt,name=KillNormal,proto3" json:"KillNormal,omitempty"`                     //累积杀普通怪
	KillElite            int64  `protobuf:"varint,14,opt,name=KillElite,proto3" json:"KillElite,omitempty"`                       //累积杀精英怪
	KillBoss             int64  `protobuf:"varint,15,opt,name=KillBoss,proto3" json:"KillBoss,omitempty"`                         //累积杀boss怪
	LinkSkillAttackCount int64  `protobuf:"varint,16,opt,name=LinkSkillAttackCount,proto3" json:"LinkSkillAttackCount,omitempty"` //连携技能击中次数
	IsAssist             bool   `protobuf:"varint,17,opt,name=IsAssist,proto3" json:"IsAssist,omitempty"`                         // 是否是连携
}

func (x *FightStaticData) Reset() {
	*x = FightStaticData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightStaticData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightStaticData) ProtoMessage() {}

func (x *FightStaticData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightStaticData.ProtoReflect.Descriptor instead.
func (*FightStaticData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{70}
}

func (x *FightStaticData) GetPetId() int32 {
	if x != nil {
		return x.PetId
	}
	return 0
}

func (x *FightStaticData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FightStaticData) GetDamage() int64 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *FightStaticData) GetBearDamage() int64 {
	if x != nil {
		return x.BearDamage
	}
	return 0
}

func (x *FightStaticData) GetTreated() int64 {
	if x != nil {
		return x.Treated
	}
	return 0
}

func (x *FightStaticData) GetIsDeath() bool {
	if x != nil {
		return x.IsDeath
	}
	return false
}

func (x *FightStaticData) GetDamageMax() int64 {
	if x != nil {
		return x.DamageMax
	}
	return 0
}

func (x *FightStaticData) GetBearDamageMax() int64 {
	if x != nil {
		return x.BearDamageMax
	}
	return 0
}

func (x *FightStaticData) GetTreatedMax() int64 {
	if x != nil {
		return x.TreatedMax
	}
	return 0
}

func (x *FightStaticData) GetBloodlineLevel() int32 {
	if x != nil {
		return x.BloodlineLevel
	}
	return 0
}

func (x *FightStaticData) GetBattleScore() int64 {
	if x != nil {
		return x.BattleScore
	}
	return 0
}

func (x *FightStaticData) GetObjId() uint64 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *FightStaticData) GetKillNormal() int64 {
	if x != nil {
		return x.KillNormal
	}
	return 0
}

func (x *FightStaticData) GetKillElite() int64 {
	if x != nil {
		return x.KillElite
	}
	return 0
}

func (x *FightStaticData) GetKillBoss() int64 {
	if x != nil {
		return x.KillBoss
	}
	return 0
}

func (x *FightStaticData) GetLinkSkillAttackCount() int64 {
	if x != nil {
		return x.LinkSkillAttackCount
	}
	return 0
}

func (x *FightStaticData) GetIsAssist() bool {
	if x != nil {
		return x.IsAssist
	}
	return false
}

type PlayerFightStaticData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUid  uint64             `protobuf:"varint,1,opt,name=PlayerUid,proto3" json:"PlayerUid,omitempty"`
	StaticList []*FightStaticData `protobuf:"bytes,2,rep,name=StaticList,proto3" json:"StaticList,omitempty"`
}

func (x *PlayerFightStaticData) Reset() {
	*x = PlayerFightStaticData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerFightStaticData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFightStaticData) ProtoMessage() {}

func (x *PlayerFightStaticData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFightStaticData.ProtoReflect.Descriptor instead.
func (*PlayerFightStaticData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{71}
}

func (x *PlayerFightStaticData) GetPlayerUid() uint64 {
	if x != nil {
		return x.PlayerUid
	}
	return 0
}

func (x *PlayerFightStaticData) GetStaticList() []*FightStaticData {
	if x != nil {
		return x.StaticList
	}
	return nil
}

// 释放技能消耗的HP数据
type SkillCostHpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostObjId        uint64 `protobuf:"varint,1,opt,name=CostObjId,proto3" json:"CostObjId,omitempty"`               //消耗HP的对象ID
	CostHp           int64  `protobuf:"varint,2,opt,name=CostHp,proto3" json:"CostHp,omitempty"`                     //消耗的HP值
	NowHp            int64  `protobuf:"varint,3,opt,name=NowHp,proto3" json:"NowHp,omitempty"`                       //当前HP值
	LastReplayHpTime int64  `protobuf:"varint,4,opt,name=LastReplayHpTime,proto3" json:"LastReplayHpTime,omitempty"` //回复血量时间戳MS
}

func (x *SkillCostHpData) Reset() {
	*x = SkillCostHpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillCostHpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillCostHpData) ProtoMessage() {}

func (x *SkillCostHpData) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillCostHpData.ProtoReflect.Descriptor instead.
func (*SkillCostHpData) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{72}
}

func (x *SkillCostHpData) GetCostObjId() uint64 {
	if x != nil {
		return x.CostObjId
	}
	return 0
}

func (x *SkillCostHpData) GetCostHp() int64 {
	if x != nil {
		return x.CostHp
	}
	return 0
}

func (x *SkillCostHpData) GetNowHp() int64 {
	if x != nil {
		return x.NowHp
	}
	return 0
}

func (x *SkillCostHpData) GetLastReplayHpTime() int64 {
	if x != nil {
		return x.LastReplayHpTime
	}
	return 0
}

// 能力晶石数据
type MsgSparInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SparId       int32  `protobuf:"varint,1,opt,name=SparId,proto3" json:"SparId,omitempty"`             //能力晶石配置ID
	SparStar     int32  `protobuf:"varint,2,opt,name=SparStar,proto3" json:"SparStar,omitempty"`         //能力晶石星级 0级开始
	EquipObjType int32  `protobuf:"varint,3,opt,name=EquipObjType,proto3" json:"EquipObjType,omitempty"` //穿戴此能力晶石的对象,只能是玩家或者宠物 对应keyword中的EObjectType枚举 天生晶石此数据无效
	EquipObjId   uint64 `protobuf:"varint,4,opt,name=EquipObjId,proto3" json:"EquipObjId,omitempty"`     //穿戴此能力晶石的玩家/宠物唯一id 为0表示没有被穿戴 天生晶石此数据无效
	EquipPos     int32  `protobuf:"varint,5,opt,name=EquipPos,proto3" json:"EquipPos,omitempty"`         //穿戴位置 玩家从0开始，宠物从1开始 天生晶石此数据无效
}

func (x *MsgSparInfo) Reset() {
	*x = MsgSparInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgproto_base_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSparInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSparInfo) ProtoMessage() {}

func (x *MsgSparInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgproto_base_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSparInfo.ProtoReflect.Descriptor instead.
func (*MsgSparInfo) Descriptor() ([]byte, []int) {
	return file_msgproto_base_proto_rawDescGZIP(), []int{73}
}

func (x *MsgSparInfo) GetSparId() int32 {
	if x != nil {
		return x.SparId
	}
	return 0
}

func (x *MsgSparInfo) GetSparStar() int32 {
	if x != nil {
		return x.SparStar
	}
	return 0
}

func (x *MsgSparInfo) GetEquipObjType() int32 {
	if x != nil {
		return x.EquipObjType
	}
	return 0
}

func (x *MsgSparInfo) GetEquipObjId() uint64 {
	if x != nil {
		return x.EquipObjId
	}
	return 0
}

func (x *MsgSparInfo) GetEquipPos() int32 {
	if x != nil {
		return x.EquipPos
	}
	return 0
}

var File_msgproto_base_proto protoreflect.FileDescriptor

var file_msgproto_base_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x73, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x73, 0x67, 0x1a, 0x16, 0x6d, 0x73, 0x67, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x03,
	0x52, 0x65, 0x74, 0x22, 0x6f, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45,
	0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x45, 0x78, 0x70, 0x22, 0x45, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x10,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x10, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x0a, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x51, 0x0a, 0x0a, 0x54, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x11, 0x54,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x54, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x0f, 0x54, 0x61, 0x6d, 0x65, 0x72, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe0, 0x01,
	0x0a, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x65, 0x78,
	0x74, 0x43, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x61,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x09, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x23, 0x0a, 0x07, 0x4d,
	0x73, 0x67, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x08, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x4e, 0x69, 0x6c, 0x22, 0x3c, 0x0a, 0x08, 0x4d, 0x61,
	0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x01, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x22, 0x53, 0x0a,
	0x0b, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x48, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x75, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x75, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x48, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53,
	0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x48, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x48,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x70, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x77, 0x43, 0x44, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x4f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x64,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x77, 0x43,
	0x44, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x64, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x64, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61,
	0x70, 0x1a, 0x44, 0x0a, 0x16, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x64, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x06, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x62, 0x6a,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x72,
	0x70, 0x6c, 0x75, 0x73, 0x48, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x75,
	0x72, 0x70, 0x6c, 0x75, 0x73, 0x48, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x4f,
	0x62, 0x6a, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d,
	0x4f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x42, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x52, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x52, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x48,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x52, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x48, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x52, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x70, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x48, 0x70, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x48, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x48, 0x70, 0x52, 0x09, 0x41, 0x64, 0x64, 0x48, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x0f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x46, 0x69, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x69, 0x78, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x43, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x72, 0x63, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x53, 0x72, 0x63, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09,
	0x53, 0x72, 0x63, 0x4f, 0x62, 0x6a, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x53, 0x72, 0x63,
	0x4f, 0x62, 0x6a, 0x50, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x62, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x13, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x62,
	0x6a, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4f, 0x62, 0x6a, 0x49, 0x44,
	0x12, 0x32, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x0e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0e, 0x54, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x09, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x17, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x55, 0x73,
	0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x0e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x55, 0x73,
	0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x09,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x61, 0x6d, 0x65, 0x72, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x22, 0x66, 0x0a, 0x11, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x53, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x22, 0x4e, 0x0a, 0x0e, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xaf, 0x02, 0x0a, 0x0f, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x31,
	0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x4b, 0x0a, 0x15, 0x49, 0x6e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x6f, 0x6e, 0x50, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x49, 0x6e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x47,
	0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x4d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a, 0x53, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x14,
	0x57, 0x61, 0x72, 0x53, 0x68, 0x69, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x83,
	0x01, 0x0a, 0x13, 0x57, 0x61, 0x72, 0x53, 0x68, 0x69, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x1a, 0x57, 0x61, 0x72, 0x53, 0x68, 0x69, 0x70,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x57, 0x61, 0x72, 0x53, 0x68, 0x69, 0x70, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x57, 0x61, 0x72, 0x53, 0x68, 0x69, 0x70, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xd8, 0x02, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x75, 0x69,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x50, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x49, 0x64, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x49, 0x64, 0x78, 0x12,
	0x31, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x46, 0x58, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0f, 0x53, 0x46, 0x58, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xff, 0x02, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x13, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x53, 0x0a, 0x14, 0x57, 0x61, 0x72, 0x53, 0x68, 0x69, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x57, 0x61, 0x72, 0x53, 0x68, 0x69, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x14,
	0x57, 0x61, 0x72, 0x53, 0x68, 0x69, 0x70, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x75, 0x0a, 0x0f, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x50, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x49,
	0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x49, 0x6e,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a,
	0x3b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x02, 0x0a,
	0x10, 0x50, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x5c, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x50, 0x65,
	0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x50, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x45,
	0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xce, 0x01, 0x0a, 0x12,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x66, 0x67, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x49, 0x64, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x49,
	0x64, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x75, 0x69, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x22, 0xaf, 0x02, 0x0a,
	0x0d, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26,
	0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x38, 0x0a, 0x17,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x55, 0x0a, 0x0e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b,
	0x0a, 0x0b, 0x50, 0x65, 0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x4d, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x14,
	0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x73, 0x46, 0x69, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x49, 0x73, 0x46, 0x69, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50,
	0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x69, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x15,
	0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x50, 0x6f, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xca, 0x03, 0x0a, 0x0b, 0x50, 0x65, 0x74, 0x57, 0x61, 0x73, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x34, 0x0a, 0x15, 0x50, 0x65, 0x74, 0x57, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x50, 0x65, 0x74, 0x57, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x65, 0x74, 0x57,
	0x61, 0x73, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x50, 0x65, 0x74, 0x57, 0x61, 0x73, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x57, 0x61, 0x73, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x57, 0x61, 0x73, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x52,
	0x0a, 0x10, 0x57, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50,
	0x65, 0x74, 0x57, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x61, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x57, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0d, 0x57, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x50, 0x65, 0x74, 0x57, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x61, 0x73, 0x68,
	0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x57, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0x43, 0x0a,
	0x15, 0x57, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x12, 0x57, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x97, 0x02, 0x0a, 0x10, 0x50, 0x65, 0x74, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x50, 0x6f, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x50, 0x65, 0x74, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x4d, 0x61, 0x70, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x57, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x57, 0x61, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x57, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x50, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x5a, 0x0a,
	0x11, 0x4d, 0x61, 0x70, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x0d, 0x0a, 0x07, 0x50, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x4d,
	0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x0a, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x0a, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x50,
	0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x50, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x50, 0x6f, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x50, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4b, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x4d, 0x61, 0x70,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x53, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x49, 0x6e, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x12, 0x4e, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x6f, 0x6f, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x46, 0x6f, 0x6f, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x4d, 0x6f,
	0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50,
	0x65, 0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x4d, 0x6f, 0x6f, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x45, 0x78, 0x69, 0x74, 0x48, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x45, 0x78,
	0x69, 0x74, 0x48, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x69, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x44, 0x69, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x69, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x46, 0x6f, 0x6f, 0x64, 0x42, 0x75, 0x66, 0x66, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x6f, 0x6f, 0x64, 0x42, 0x75, 0x66, 0x66, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x4d, 0x61, 0x70, 0x46, 0x6f, 0x6f, 0x64, 0x42, 0x75, 0x66, 0x66, 0x12,
	0x66, 0x0a, 0x18, 0x4d, 0x61, 0x70, 0x46, 0x6f, 0x6f, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4d, 0x61, 0x70, 0x46, 0x6f, 0x6f, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x4d,
	0x61, 0x70, 0x46, 0x6f, 0x6f, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x49, 0x6e, 0x42, 0x6f, 0x72,
	0x6e, 0x53, 0x70, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x70, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x49, 0x6e, 0x42, 0x6f, 0x72, 0x6e, 0x53, 0x70, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x4b, 0x0a, 0x0f, 0x50, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x50, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x3f,
	0x0a, 0x11, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x59, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x49, 0x6e,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x46, 0x6f, 0x6f, 0x64, 0x42, 0x75, 0x66, 0x66, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4b, 0x0a, 0x1d, 0x4d, 0x61, 0x70, 0x46, 0x6f, 0x6f, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14,
	0x50, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xbd, 0x01, 0x0a, 0x0b, 0x50, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x50, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x65, 0x74, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x50, 0x65, 0x74, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x5d, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x50, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x22, 0xe3, 0x04, 0x0a, 0x08, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x43, 0x61, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x42, 0x75, 0x66, 0x66, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x42, 0x75, 0x66, 0x66, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x42, 0x75, 0x66, 0x66, 0x41, 0x74, 0x74, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x75, 0x66,
	0x66, 0x41, 0x74, 0x74, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x42, 0x75, 0x66, 0x66, 0x41, 0x74, 0x74, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x5e, 0x0a, 0x15, 0x43, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x75, 0x66, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x15, 0x43, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x55, 0x0a, 0x16, 0x42, 0x75, 0x66, 0x66, 0x41, 0x74,
	0x74, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a,
	0x1a, 0x43, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x0f, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xde, 0x01, 0x0a, 0x0c, 0x50, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x50, 0x65, 0x74, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x4d, 0x61, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x1a, 0x45, 0x0a, 0x17, 0x4d, 0x61,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5c, 0x0a, 0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x61, 0x73, 0x74, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xb1, 0x03, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x50, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x03, 0x50, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x08, 0x50, 0x65, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x50, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x50, 0x65,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x0b, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f,
	0x6b, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0c, 0x53, 0x74, 0x75, 0x66, 0x66, 0x50, 0x6f, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x75, 0x66, 0x66, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x74, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x6f, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x6f,
	0x73, 0x49, 0x44, 0x22, 0xac, 0x03, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x69, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0f,
	0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x61, 0x69, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x4d, 0x61, 0x69, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x4d, 0x61, 0x78, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x72, 0x65, 0x6e,
	0x61, 0x4d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x72, 0x65,
	0x6e, 0x61, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x41, 0x72, 0x65, 0x6e, 0x61, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x48, 0x6f,
	0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x6a, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x13, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x44, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x58, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x59,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x59, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x74, 0x75, 0x66, 0x66, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53,
	0x74, 0x75, 0x66, 0x66, 0x49, 0x64, 0x22, 0xa5, 0x05, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x50, 0x6f, 0x73, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x59, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x59, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x57, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x57, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x77, 0x48, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x77, 0x48, 0x70, 0x12, 0x2a, 0x0a, 0x10,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x66, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69,
	0x66, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x44, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x77, 0x4d, 0x61, 0x6e, 0x61, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x77, 0x4d, 0x61,
	0x6e, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x77, 0x42, 0x72, 0x61, 0x77, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4e, 0x6f, 0x77, 0x42, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x69, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x52, 0x69, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x52, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x52, 0x69, 0x76, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x52,
	0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x6f,
	0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x22, 0x38, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x53, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x09,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x74, 0x0a, 0x0c, 0x53, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x43,
	0x66, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x75, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x62,
	0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x53, 0x75, 0x62, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x53, 0x75, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54,
	0x61, 0x6c, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85, 0x04, 0x0a, 0x0d,
	0x48, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x0e, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x66,
	0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x48, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x58, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x50, 0x6f, 0x73, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x59, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x59, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x53, 0x75, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x75, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x53, 0x75, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x14,
	0x53, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x53, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x53,
	0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x0b, 0x44, 0x72, 0x61, 0x77, 0x50, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x57, 0x65, 0x65, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x97, 0x04, 0x0a, 0x0f, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x54, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x44, 0x65,
	0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x44, 0x65, 0x61,
	0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x42, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4b, 0x69, 0x6c, 0x6c,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x6c,
	0x69, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x6c, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x69, 0x6c, 0x6c, 0x42, 0x6f, 0x73, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4b, 0x69, 0x6c, 0x6c, 0x42, 0x6f, 0x73, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x22, 0x6b, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x01,
	0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x48, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x43, 0x6f, 0x73, 0x74, 0x48, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x43, 0x6f, 0x73, 0x74, 0x48, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x77, 0x48, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4e, 0x6f, 0x77, 0x48, 0x70, 0x12, 0x2a, 0x0a,
	0x10, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x48, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x4d, 0x73,
	0x67, 0x53, 0x70, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x61,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x70, 0x61, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x70, 0x61, 0x72, 0x53, 0x74, 0x61, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4f, 0x62, 0x6a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4f, 0x62, 0x6a, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4f, 0x62, 0x6a, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4f, 0x62, 0x6a, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x2a, 0x67, 0x0a,
	0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x75,
	0x73, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x61, 0x70, 0x54, 0x61, 0x70, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x61, 0x78, 0x10, 0x06, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x6d, 0x73, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msgproto_base_proto_rawDescOnce sync.Once
	file_msgproto_base_proto_rawDescData = file_msgproto_base_proto_rawDesc
)

func file_msgproto_base_proto_rawDescGZIP() []byte {
	file_msgproto_base_proto_rawDescOnce.Do(func() {
		file_msgproto_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_msgproto_base_proto_rawDescData)
	})
	return file_msgproto_base_proto_rawDescData
}

var file_msgproto_base_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_msgproto_base_proto_msgTypes = make([]protoimpl.MessageInfo, 91)
var file_msgproto_base_proto_goTypes = []interface{}{
	(LoginType)(0),                     // 0: msg.LoginType
	(*CommonRetData)(nil),              // 1: msg.CommonRetData
	(*PassiveData)(nil),                // 2: msg.PassiveData
	(*SkillData)(nil),                  // 3: msg.SkillData
	(*SkillPassiveData)(nil),           // 4: msg.SkillPassiveData
	(*FightPassiveData)(nil),           // 5: msg.FightPassiveData
	(*TalentData)(nil),                 // 6: msg.TalentData
	(*TalentPlan)(nil),                 // 7: msg.TalentPlan
	(*TalentClassicPlan)(nil),          // 8: msg.TalentClassicPlan
	(*TamerTalentPlan)(nil),            // 9: msg.TamerTalentPlan
	(*SkillLoadOtherData)(nil),         // 10: msg.SkillLoadOtherData
	(*MsgPing)(nil),                    // 11: msg.MsgPing
	(*MsgPong)(nil),                    // 12: msg.MsgPong
	(*MsgNil)(nil),                     // 13: msg.MsgNil
	(*MapPoint)(nil),                   // 14: msg.MapPoint
	(*Point)(nil),                      // 15: msg.Point
	(*DamageAddHp)(nil),                // 16: msg.DamageAddHp
	(*CounteredDamage)(nil),            // 17: msg.CounteredDamage
	(*SkillNowCDChange)(nil),           // 18: msg.SkillNowCDChange
	(*TargetDamages)(nil),              // 19: msg.TargetDamages
	(*ExecutorTarget)(nil),             // 20: msg.ExecutorTarget
	(*MsgInput)(nil),                   // 21: msg.MsgInput
	(*ExecutorGroupId)(nil),            // 22: msg.ExecutorGroupId
	(*EquipmentAdditional)(nil),        // 23: msg.EquipmentAdditional
	(*TalentAdditional)(nil),           // 24: msg.TalentAdditional
	(*TalentClassicAdditional)(nil),    // 25: msg.TalentClassicAdditional
	(*TamerTalentAdditional)(nil),      // 26: msg.TamerTalentAdditional
	(*AttributeAddInfo)(nil),           // 27: msg.AttributeAddInfo
	(*EquipPropertyInfo)(nil),          // 28: msg.EquipPropertyInfo
	(*EquipPropertys)(nil),             // 29: msg.EquipPropertys
	(*EquipAdditional)(nil),            // 30: msg.EquipAdditional
	(*WarShipEquipProperty)(nil),       // 31: msg.WarShipEquipProperty
	(*WarShipEquipPassive)(nil),        // 32: msg.WarShipEquipPassive
	(*WarShipEquipmentAdditional)(nil), // 33: msg.WarShipEquipmentAdditional
	(*GoodsInfo)(nil),                  // 34: msg.GoodsInfo
	(*BloodlineAdditional)(nil),        // 35: msg.BloodlineAdditional
	(*ItemInfo)(nil),                   // 36: msg.ItemInfo
	(*PetIntimateInfo)(nil),            // 37: msg.PetIntimateInfo
	(*CharacterPropertyInfo)(nil),      // 38: msg.CharacterPropertyInfo
	(*PetCharacterInfo)(nil),           // 39: msg.PetCharacterInfo
	(*PetAwardInfo)(nil),               // 40: msg.PetAwardInfo
	(*BloodlineEquipInfo)(nil),         // 41: msg.BloodlineEquipInfo
	(*BloodlineInfo)(nil),              // 42: msg.BloodlineInfo
	(*PetMoodInfo)(nil),                // 43: msg.PetMoodInfo
	(*PotentialElementInfo)(nil),       // 44: msg.PotentialElementInfo
	(*PetWashInfo)(nil),                // 45: msg.PetWashInfo
	(*PetPotentialInfo)(nil),           // 46: msg.PetPotentialInfo
	(*PetInfo)(nil),                    // 47: msg.PetInfo
	(*PetBaseInfo)(nil),                // 48: msg.PetBaseInfo
	(*AttributeInfo)(nil),              // 49: msg.AttributeInfo
	(*AttrChange)(nil),                 // 50: msg.AttrChange
	(*BuffInfo)(nil),                   // 51: msg.BuffInfo
	(*RemoveBuffInfo)(nil),             // 52: msg.RemoveBuffInfo
	(*TalentPointInfo)(nil),            // 53: msg.TalentPointInfo
	(*PetLevelInfo)(nil),               // 54: msg.PetLevelInfo
	(*EnergyInfo)(nil),                 // 55: msg.EnergyInfo
	(*NotifyItemInfo)(nil),             // 56: msg.NotifyItemInfo
	(*StuffPosData)(nil),               // 57: msg.StuffPosData
	(*UserMailData)(nil),               // 58: msg.UserMailData
	(*UserBaseInfo)(nil),               // 59: msg.UserBaseInfo
	(*AdditionalSp)(nil),               // 60: msg.AdditionalSp
	(*DynamicBlockPosInfo)(nil),        // 61: msg.DynamicBlockPosInfo
	(*PublicEnterMapResData)(nil),      // 62: msg.PublicEnterMapResData
	(*GameTimeItem)(nil),               // 63: msg.GameTimeItem
	(*SellItem)(nil),                   // 64: msg.SellItem
	(*EquipSlot)(nil),                  // 65: msg.EquipSlot
	(*SurpriseData)(nil),               // 66: msg.SurpriseData
	(*SurpriseTalkData)(nil),           // 67: msg.SurpriseTalkData
	(*HomeBuildInfo)(nil),              // 68: msg.HomeBuildInfo
	(*DrawPetInfo)(nil),                // 69: msg.DrawPetInfo
	(*MsgNotifyDailyRefresh)(nil),      // 70: msg.MsgNotifyDailyRefresh
	(*FightStaticData)(nil),            // 71: msg.FightStaticData
	(*PlayerFightStaticData)(nil),      // 72: msg.PlayerFightStaticData
	(*SkillCostHpData)(nil),            // 73: msg.SkillCostHpData
	(*MsgSparInfo)(nil),                // 74: msg.MsgSparInfo
	nil,                                // 75: msg.SkillNowCDChange.SkillCdRefreshMapEntry
	nil,                                // 76: msg.EquipAdditional.MapPropertyEntry
	nil,                                // 77: msg.CharacterPropertyInfo.PropertyEntry
	nil,                                // 78: msg.PetCharacterInfo.PropertyGroupEntry
	nil,                                // 79: msg.BloodlineInfo.EquipInfoEntry
	nil,                                // 80: msg.PetWashInfo.WashPropertyInfoEntry
	nil,                                // 81: msg.PetWashInfo.WashPotentialEntry
	nil,                                // 82: msg.PetPotentialInfo.MapPotentialEntry
	nil,                                // 83: msg.PetInfo.MapAttributeEntry
	nil,                                // 84: msg.PetInfo.MapSkillPassiveEntry
	nil,                                // 85: msg.PetInfo.IntimateDayLimitEntry
	nil,                                // 86: msg.PetInfo.MapFoodBuffEntry
	nil,                                // 87: msg.PetInfo.MapFoodAdditionAttributeEntry
	nil,                                // 88: msg.PetInfo.PetPropertyInfoEntry
	nil,                                // 89: msg.BuffInfo.BuffAttrChangeMapEntry
	nil,                                // 90: msg.BuffInfo.CasterAttrAdditionMapEntry
	nil,                                // 91: msg.PetLevelInfo.MapUpdateAttributeEntry
	(ErrCode)(0),                       // 92: msg.ErrCode
}
var file_msgproto_base_proto_depIdxs = []int32{
	92, // 0: msg.CommonRetData.Ret:type_name -> msg.ErrCode
	2,  // 1: msg.SkillPassiveData.PassiveList:type_name -> msg.PassiveData
	2,  // 2: msg.SkillPassiveData.TempPassiveList:type_name -> msg.PassiveData
	6,  // 3: msg.TalentPlan.TalentList:type_name -> msg.TalentData
	6,  // 4: msg.TalentClassicPlan.TalentList:type_name -> msg.TalentData
	6,  // 5: msg.TamerTalentPlan.TalentList:type_name -> msg.TalentData
	75, // 6: msg.SkillNowCDChange.SkillCdRefreshMap:type_name -> msg.SkillNowCDChange.SkillCdRefreshMapEntry
	16, // 7: msg.TargetDamages.AddHpInfo:type_name -> msg.DamageAddHp
	17, // 8: msg.TargetDamages.CounteredInfo:type_name -> msg.CounteredDamage
	15, // 9: msg.ExecutorTarget.SrcObjPos:type_name -> msg.Point
	15, // 10: msg.ExecutorTarget.TargetPos:type_name -> msg.Point
	30, // 11: msg.EquipmentAdditional.EquipInfo:type_name -> msg.EquipAdditional
	7,  // 12: msg.TalentAdditional.TalentPlanData:type_name -> msg.TalentPlan
	3,  // 13: msg.TalentAdditional.SkillList:type_name -> msg.SkillData
	3,  // 14: msg.TalentClassicAdditional.SkillList:type_name -> msg.SkillData
	8,  // 15: msg.TalentClassicAdditional.TalentPlanData:type_name -> msg.TalentClassicPlan
	3,  // 16: msg.TamerTalentAdditional.SkillList:type_name -> msg.SkillData
	9,  // 17: msg.TamerTalentAdditional.TalentPlanData:type_name -> msg.TamerTalentPlan
	27, // 18: msg.EquipPropertyInfo.SpeAttrs:type_name -> msg.AttributeAddInfo
	28, // 19: msg.EquipPropertys.PropertyArray:type_name -> msg.EquipPropertyInfo
	27, // 20: msg.EquipAdditional.BaseAttr:type_name -> msg.AttributeAddInfo
	27, // 21: msg.EquipAdditional.InFightSummonPetAttrs:type_name -> msg.AttributeAddInfo
	76, // 22: msg.EquipAdditional.MapProperty:type_name -> msg.EquipAdditional.MapPropertyEntry
	31, // 23: msg.WarShipEquipmentAdditional.PropertyList:type_name -> msg.WarShipEquipProperty
	32, // 24: msg.WarShipEquipmentAdditional.PassiveList:type_name -> msg.WarShipEquipPassive
	27, // 25: msg.BloodlineAdditional.BaseAttr:type_name -> msg.AttributeAddInfo
	23, // 26: msg.ItemInfo.EquipmentInfo:type_name -> msg.EquipmentAdditional
	35, // 27: msg.ItemInfo.BloodlineEquipsInfo:type_name -> msg.BloodlineAdditional
	33, // 28: msg.ItemInfo.WarShipEquipmentInfo:type_name -> msg.WarShipEquipmentAdditional
	77, // 29: msg.CharacterPropertyInfo.Property:type_name -> msg.CharacterPropertyInfo.PropertyEntry
	78, // 30: msg.PetCharacterInfo.PropertyGroup:type_name -> msg.PetCharacterInfo.PropertyGroupEntry
	39, // 31: msg.PetAwardInfo.CharacterInfo:type_name -> msg.PetCharacterInfo
	79, // 32: msg.BloodlineInfo.EquipInfo:type_name -> msg.BloodlineInfo.EquipInfoEntry
	80, // 33: msg.PetWashInfo.WashPropertyInfo:type_name -> msg.PetWashInfo.WashPropertyInfoEntry
	81, // 34: msg.PetWashInfo.WashPotential:type_name -> msg.PetWashInfo.WashPotentialEntry
	82, // 35: msg.PetPotentialInfo.MapPotential:type_name -> msg.PetPotentialInfo.MapPotentialEntry
	45, // 36: msg.PetPotentialInfo.WashInfo:type_name -> msg.PetWashInfo
	83, // 37: msg.PetInfo.MapAttribute:type_name -> msg.PetInfo.MapAttributeEntry
	3,  // 38: msg.PetInfo.MergeSkill:type_name -> msg.SkillData
	3,  // 39: msg.PetInfo.SkillGroup:type_name -> msg.SkillData
	46, // 40: msg.PetInfo.PotentialInfo:type_name -> msg.PetPotentialInfo
	39, // 41: msg.PetInfo.CharacterInfo:type_name -> msg.PetCharacterInfo
	84, // 42: msg.PetInfo.MapSkillPassive:type_name -> msg.PetInfo.MapSkillPassiveEntry
	85, // 43: msg.PetInfo.IntimateDayLimit:type_name -> msg.PetInfo.IntimateDayLimitEntry
	42, // 44: msg.PetInfo.Bloodline:type_name -> msg.BloodlineInfo
	43, // 45: msg.PetInfo.Mood:type_name -> msg.PetMoodInfo
	86, // 46: msg.PetInfo.MapFoodBuff:type_name -> msg.PetInfo.MapFoodBuffEntry
	87, // 47: msg.PetInfo.MapFoodAdditionAttribute:type_name -> msg.PetInfo.MapFoodAdditionAttributeEntry
	74, // 48: msg.PetInfo.InBornSparInfo:type_name -> msg.MsgSparInfo
	88, // 49: msg.PetInfo.PetPropertyInfo:type_name -> msg.PetInfo.PetPropertyInfoEntry
	89, // 50: msg.BuffInfo.BuffAttrChangeMap:type_name -> msg.BuffInfo.BuffAttrChangeMapEntry
	90, // 51: msg.BuffInfo.CasterAttrAdditionMap:type_name -> msg.BuffInfo.CasterAttrAdditionMapEntry
	91, // 52: msg.PetLevelInfo.MapUpdateAttribute:type_name -> msg.PetLevelInfo.MapUpdateAttributeEntry
	36, // 53: msg.NotifyItemInfo.Item:type_name -> msg.ItemInfo
	49, // 54: msg.NotifyItemInfo.Attribute:type_name -> msg.AttributeInfo
	47, // 55: msg.NotifyItemInfo.Pet:type_name -> msg.PetInfo
	53, // 56: msg.NotifyItemInfo.Talent:type_name -> msg.TalentPointInfo
	54, // 57: msg.NotifyItemInfo.PetLevel:type_name -> msg.PetLevelInfo
	37, // 58: msg.NotifyItemInfo.PetIntimate:type_name -> msg.PetIntimateInfo
	55, // 59: msg.NotifyItemInfo.Energy:type_name -> msg.EnergyInfo
	34, // 60: msg.UserMailData.ItemAttachments:type_name -> msg.GoodsInfo
	67, // 61: msg.HomeBuildInfo.SurpriseTalkList:type_name -> msg.SurpriseTalkData
	66, // 62: msg.HomeBuildInfo.SurpriseAccidentList:type_name -> msg.SurpriseData
	71, // 63: msg.PlayerFightStaticData.StaticList:type_name -> msg.FightStaticData
	29, // 64: msg.EquipAdditional.MapPropertyEntry.value:type_name -> msg.EquipPropertys
	38, // 65: msg.PetCharacterInfo.PropertyGroupEntry.value:type_name -> msg.CharacterPropertyInfo
	41, // 66: msg.BloodlineInfo.EquipInfoEntry.value:type_name -> msg.BloodlineEquipInfo
	44, // 67: msg.PetWashInfo.WashPotentialEntry.value:type_name -> msg.PotentialElementInfo
	44, // 68: msg.PetPotentialInfo.MapPotentialEntry.value:type_name -> msg.PotentialElementInfo
	4,  // 69: msg.PetInfo.MapSkillPassiveEntry.value:type_name -> msg.SkillPassiveData
	50, // 70: msg.BuffInfo.BuffAttrChangeMapEntry.value:type_name -> msg.AttrChange
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_msgproto_base_proto_init() }
func file_msgproto_base_proto_init() {
	if File_msgproto_base_proto != nil {
		return
	}
	file_msgproto_errcode_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_msgproto_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonRetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillPassiveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightPassiveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalentPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalentClassicPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamerTalentPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillLoadOtherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgNil); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DamageAddHp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounteredDamage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillNowCDChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetDamages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutorTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutorGroupId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentAdditional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalentAdditional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalentClassicAdditional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamerTalentAdditional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeAddInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPropertyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPropertys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipAdditional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarShipEquipProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarShipEquipPassive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarShipEquipmentAdditional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BloodlineAdditional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetIntimateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterPropertyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetCharacterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetAwardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BloodlineEquipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BloodlineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetMoodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotentialElementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetWashInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetPotentialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBuffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalentPointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnergyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StuffPosData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMailData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalSp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicBlockPosInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicEnterMapResData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameTimeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurpriseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurpriseTalkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeBuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawPetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgNotifyDailyRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightStaticData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerFightStaticData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillCostHpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgproto_base_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSparInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msgproto_base_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   91,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msgproto_base_proto_goTypes,
		DependencyIndexes: file_msgproto_base_proto_depIdxs,
		EnumInfos:         file_msgproto_base_proto_enumTypes,
		MessageInfos:      file_msgproto_base_proto_msgTypes,
	}.Build()
	File_msgproto_base_proto = out.File
	file_msgproto_base_proto_rawDesc = nil
	file_msgproto_base_proto_goTypes = nil
	file_msgproto_base_proto_depIdxs = nil
}
