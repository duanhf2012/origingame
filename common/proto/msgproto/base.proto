syntax = "proto3";
import "msgproto/errcode.proto";

package msg;
option go_package                           = ".;msg";


message Bytes {
    bytes value = 1;
}

message BytesList {
    repeated Bytes valueList = 1;
}

//通用返回-用于功能被关闭时返回,注:需要所有返回消息结构第1个参数是ErrCode
message CommonRetData {
	ErrCode Ret			= 1;  //非0失败
}

message PassiveData {
    int32 PassiveId		= 1;  //被动ID
	int32 PassiveLevel	= 2;  //被动等级
	int32 PassiveExp	= 3;  //被动经验
}

message SkillData {
    int32 SkillId    = 1;
    int32 SkillLevel = 2;
}

message SkillPassiveData {
    int32 SkillId                        = 1;  //技能ID
    repeated PassiveData PassiveList     = 2;  //生效被动列表
    repeated PassiveData TempPassiveList = 3;  //临时被动列表
}

message FightPassiveData {
    int32 SkillId                  = 1;  //技能ID
    repeated int32 PassiveList     = 2;  //生效被动列表——配置表中的唯一ID
}

message TalentData {
    int32 GroupId = 1;  //天赋组ID
    int32 Level   = 2;  //天赋等级
}

message TalentPlan {
    string name                    = 1;  //天赋方案名称
    repeated TalentData TalentList = 2;  //天赋方案点
}

message TalentClassicPlan {
    string name                    = 1;  //天赋方案名称
    repeated TalentData TalentList = 2;  //天赋方案点
}

message TamerTalentPlan {
    string name                    = 1;  //天赋方案名称
    repeated TalentData TalentList = 2;  //天赋方案点
}

message SkillLoadOtherData {
    int32  SkillId               = 1; //技能ID
    int32  SkillSp               = 2; //技能sp
    int64  SkillNextCanCastTime  = 3; //技能下次可释放的时间戳 ms
    int32  OverlayNum            = 4; //叠加释放次数
    int64  OverlayLastTime       = 5; //堆叠时间
    uint64 OwnerId               = 6; //技能拥有者Id
}

message MsgPing {
}

message MsgPong {
    int64 nowTime = 1;
}

message MsgNil {
}

message MapPoint {
    uint32 x     = 1;
    uint32 y     = 2;
    uint64 mapId = 3;
}

message Point {
    uint32 x = 1;
    uint32 y = 2;
}

message DamageAddHp {
    int64 AttackReply  = 1;  //击中回复
    int64 SuckingBlood = 2;  //吸血
}

message CounteredDamage {
    int64 DamageValue          = 1;  //反击伤害
    int64 CounteredSurplusHp   = 2;  //反击剩余血量
    int32 CounteredShieldTimes = 3;  //次数护盾减少值
    int32 CounteredShieldHp    = 4;  //血量护盾减少值
}

message SkillNowCDChange {
    uint64 ObjId                            = 1;    //修改的对象ID 给谁减CD
    map<int32, int64>  SkillCdRefreshMap    = 2;    //技能cd信息 map[技能ID]下次可释放的时间戳 ms
}

message TargetDamages {
    uint64 ObjId       = 1;   //受伤对象ID
    int64 Damages      = 2;   //伤害值  为负则是加血
    int64 SurplusHp    = 3;   //剩余血量
    int32 TableStatus  = 4;   //伤害圆盘状态 0正常 1闪避 4暴击
    int32 ShieldTimes  = 7;   //次数护盾减少值
    int32 ShieldHp     = 8;   //血量护盾减少值
    uint64 FromObjId   = 9;   //伤害来源对象
    int32 SkillId      = 10;  //伤害来源技能ID
    int32 BuffId       = 11;  //伤害来源Buff ID

    int64 ReboundDamage    = 12;  //反伤，针对FromObjId
    int64 ReboundSurplusHp = 13;  //剩余血量

    int32 ReboundShieldTimes                = 14;  //次数护盾减少值
    int32 ReboundShieldHp                   = 15;  //血量护盾减少值
    DamageAddHp AddHpInfo                   = 16;  //吸血及击中回复
    CounteredDamage CounteredInfo           = 17;  //反击伤害信息，针对FromObjId

    //以下为debug模式才会发送的数据
    int32 DebugSkillLevel                   = 18;  //伤害来源技能等级——仅在release模式下且是技能触发伤害时有值
    int32 DebugSkillRatio                   = 19;  //伤害来源的技能倍率
    int32 DebugSkillFix                     = 20;  //伤害来源的技能固定伤害值

    //被动触发信息
    repeated int32 CasterTriggerPassive     = 21;  //技能释放者触发的被动
    repeated int32 TargetTriggerPassive     = 22;  //技能受击者触发的被动
}

message ExecutorTarget {
    uint64 TargetId = 1;  //目标ID
    uint64 SrcObjId = 2;  //源(发起者)ID
    Point SrcObjPos = 3;  //源(发起者)位置

    //附加字段
    //bool HitFly       = 4;  //是否有击飞
    //bool HitDown      = 5;  //是否有击倒
    Point TargetPos   = 6;  //目标位置
    int32 TableStatus = 7;  //伤害圆盘状态 0正常 1闪避 2招架
}

message MsgInput {
    bytes RawData                = 1;
    int32 MsgType                = 2;
    repeated uint64 ListClientId = 3;
}

message ExecutorGroupId {
    repeated int32 GroupId = 1;
}

message EquipmentAdditional {
    uint64          ObjID     = 1;  //装备的对象的ID 0表示尚未装备
	EquipAdditional EquipInfo = 3;  //装备数据
}

// 加点天赋
message TalentAdditional {
    int32 UseTalentPoint               = 1;  //使用的点天赋
    TalentPlan TalentPlanData          = 3;  //天赋方案
    repeated SkillData SkillList       = 4;  //技能
}

// 经典天赋
message TalentClassicAdditional {
    int32 UseTalentPoint               = 1;  //使用的点天赋
    int32 UseTalentIndex               = 3;  //使用的天赋方案index
    repeated SkillData SkillList       = 4;  //技能
    TalentClassicPlan TalentPlanData   = 5;  //天赋方案
}

// TamerTalent
message TamerTalentAdditional {
    int32 UseTalentPoint               = 1;  //使用的点天赋
    int32 UseTalentIndex               = 3;  //使用的天赋方案index
    repeated SkillData SkillList       = 4;  //技能
    TamerTalentPlan TalentPlanData   = 5;  //天赋方案
}

message AttributeAddInfo {
	int32 AttributeType = 1;  // 属性类型
	int64 Value = 2; // 值
	int32 Percent = 3; // 百分比
}

message EquipPropertyInfo {
    int32 PropertyId    = 1;    //装备词条ID
    repeated AttributeAddInfo SpeAttrs = 2; //装备词条属性效果(客户端自己判断对谁生效,在EquipProperty.xlsx中的SpeAttrTarget列判断)
}

//装备词条信息
message EquipPropertys {
	repeated EquipPropertyInfo PropertyArray = 1; //装备词条信息
}

message EquipAdditional {
    repeated AttributeAddInfo BaseAttr = 1; // 装备增加的属性
    repeated AttributeAddInfo InFightSummonPetAttrs = 2; // 装备增加地图中出战宠属性
	map<int32, EquipPropertys> MapProperty = 3;   //装备词条 map<装备词条类型(对应keyword中的EEquipPropertyType),词条信息>
}

message WarShipEquipProperty {
    int32 PropertyType  = 1; //性格相关词条
    int32 Value         = 2; //值
}

message WarShipEquipPassive {
    int32 PassiveEffectId       = 1; //被动效果ID
    int32 PassiveLevel          = 2; //被动等级
    int32 ObjectType            = 3; //生效对象类型 玩家or宠物 0表示都生效 对应keywords中EObjectType
}

message WarShipEquipmentAdditional {
    bool IsEquip                                 = 1;  //是否装备
    bool LockState	                             = 2;  //是否被锁定,false没有锁定 true锁定
    repeated WarShipEquipProperty PropertyList   = 3;  //舰船装备的性格相关词条
    repeated WarShipEquipPassive PassiveList     = 4;  //舰船装备的被动词条
}

message GoodsInfo {
    int32 GoodsType = 1;  //商品类型 参见keywords-GoodsTypeEnum
    int32 GoodsId   = 2;  //商品ID
    int32 Count     = 3;  //数量
    int32 Flag      = 4;  //标志，1表示是宠物自动转化来的
}

//血统因子信息
message BloodlineAdditional {
	bool LockState				= 1;  //是否被锁定,false没有锁定 true锁定
	int32 BloodlineEquipSuitId	= 2;  //血统因子套装Id 0为没有套装
	int32 Level					= 3;  //血统因子等级
	int32 Exp					= 4;  //血统因子经验
	uint64 EquipPetObjId		= 5;  //安装此血统因子的宠物唯一Id(为0表示没有被安装)
	int32 EquipPosIdx			= 6;  //安装的血统因子槽位下标(只有EquipPetObjId>0时才有效)
	repeated AttributeAddInfo BaseAttr = 7; // 装备增加的属性
	repeated int32 PropertyList = 8; // 装备增加的词条
	repeated int32 SFXPropertyList = 9; // 特性装备增加的词条
}

message ItemInfo {
    uint64 ItemObjId                  			    = 1;  //道具ID
    int32 ItemCfgId                   			    = 2;  //道具配置ID
    int32 ItemType                    			    = 3;  //道具类型
    int32 ItemCount                   			    = 4;  //道具数量
    EquipmentAdditional EquipmentInfo 			    = 5;  //装备附加信息-仅装备才有
	BloodlineAdditional BloodlineEquipsInfo		    = 6;  //血统因子信息-仅血统因子才有
	WarShipEquipmentAdditional WarShipEquipmentInfo = 7;  //舰船装备信息—仅舰船装备才有 keywords中41~54
	int64 ShopPrice									= 8;  //物品的商品价格，为0说明不是商店买的
}

//宠物亲密度信息
message PetIntimateInfo {
	uint64 PetId				= 1;  //宠物ID
	uint32 IntimateNewLevel		= 2;  //宠物当前的亲密度等级
	uint32 IntimateExp			= 3;  //宠物亲密度经验
}

//宠物性格词条属性信息
message CharacterPropertyInfo {
	bool   PropertyState		= 1; //是否解锁 true已解锁 false未解锁
	map<uint32, int32> Property	= 2; //性格词条属性 词条ID=>性格词条属性信息
}

//宠物性格信息
message PetCharacterInfo {
	uint32 CharacterId				= 1; //性格ID
	int32 CharacterState			= 2; //状态 见keyword中的PetCharacterSiteStateType
	map<int32, CharacterPropertyInfo> PropertyGroup = 3; //性格词条属性 组ID(从0开始)=>性格词条组信息
}

//宠物奖励信息
message PetAwardInfo {
    uint64 PetId				                    = 1;    //宠物ID
    int32 Exp                                       = 2;    //宠物经验
    int32 Intimate                                  = 3;    //宠物亲密度
    PetCharacterInfo CharacterInfo                  = 4;    //性格信息
    //int32 Mood                                      = 5;    //宠物心情
}

//血统因子(血统装备)信息  血统因子被动信息根据血统配置和血统等级算出来,防止策划改的血统因子的被动
message BloodlineEquipInfo {
	int32 ItemCfgId									= 1;	//血统因子配置ID
	int32 EquipPosIdx								= 2;	//血统因子安装的下标
	int32 Level										= 3;	//血统因子等级
	int32 Exp										= 4;	//血统因子经验
	int32 BloodlineEquipSuitId						= 5;	//血统因子套装Id 0为没有套装
	uint64 ItemObjId								= 6;	//血统因子唯一ID(为0表示是初始因子)
}

message BloodlineInfo {
	int32 BloodlineLevel							= 1;	//血统等级
	int32 BloodlineStep								= 2;	//血统小段
	int32 TotalFailAwakenAddValue					= 3;    //觉醒失败累计增加的概率值 这是个数值需要除幻能等级表中的觉醒值就是概率
	map<int32,BloodlineEquipInfo> EquipInfo			= 4;	//血统因子信息 key:血统因子安装的下标
}

message PetMoodInfo {
	int32 MoodValue									= 1;  //心情值
}

//宠物单向资质信息
message PotentialElementInfo {
	int32 RandomPotential							= 1; //随机资质
	bool IsFire										= 2; //随机资质是否是爆区
	int32 PotentialPill                             = 3; //资质丹加成资质
	int32 PotentialPillUseCount                     = 4; //资质丹使用次数
}

//宠物洗练信息
message PetWashInfo {
	int32 PetWashPotentialCount						= 1;  //宠物在5品时洗练次数-保底次数
	int32 PetWashValue								= 2;  //当前洗练值
	//以下是洗练未保存的洗练信息
	int32 WashQuality								= 3;  //宠物洗练的品质
	map<int32,bool> WashPropertyInfo				= 4;  //宠物洗练的词条信息 map[词条Id]是否是打书的词条
	map<int32, PotentialElementInfo> WashPotential	= 5;  //宠物洗练的资质信息 <资质类型，资质信息>
}

//宠物资质信息
message PetPotentialInfo {
	map<int32, PotentialElementInfo> MapPotential	= 1;  //宠物资质信息 <资质类型，资质信息>
	PetWashInfo WashInfo							= 2;  //宠物洗练信息
	int32 InnerPillUseCount                         = 3;  //内丹使用个数
}

message PetInfo {
    uint64 Id										= 1;   //唯一ID
    int32 PetConfigId								= 2;   //宠物ID
    map<int32, int64> MapAttribute					= 3;   //宠物属性
    int32 EquipIndex								= 4;   //宠物上阵位置
    SkillData MergeSkill							= 5;   //宠物连携技能
    repeated SkillData SkillGroup					= 6;   //宠物技能组
    PetPotentialInfo PotentialInfo					= 7;   //宠物资质信息
    bool Collect									= 8;   //是否收藏
    repeated PetCharacterInfo CharacterInfo			= 9;   //宠物性格信息 宠物性格ID->性格信息
    map<int32, SkillPassiveData> MapSkillPassive	= 10;  //被动 技能ID->被动信息 技能ID=0 表示宠物自身被动
    int32 Quality									= 11;  //宠物品阶/品质
	string NickName									= 12;	//宠物昵称,可能为空
	int32 Sex										= 13;	//宠物性别 参照keywords——SexType
	int64 GetTime									= 14;	//宠物获得时间,时间戳,单位毫秒
	uint32 IntimateLevel							= 15;	//宠物亲密度等级
	uint32 IntimateExp								= 16;	//宠物亲密度经验
	map<int32,int32> IntimateDayLimit				= 17;  //亲密度增加每日限制
	int32 FoodModeChangeValue						= 18;  //喂养食物改变模型大小值
	BloodlineInfo Bloodline							= 19;	//血统信息
	PetMoodInfo Mood								= 20;  //宠物心情信息

	//上阵后的宠物才有的数据
	int64  ExitTime									= 21;  //宠物下场的时间 ms时间戳
	int64  ExitHp									= 22;  //宠物下场时的血量
	bool   IsDie									= 23;  //是否死亡

	string InitNickName								= 24;  //初始昵称后缀
	map<int32,int64> MapFoodBuff					= 25;  //食物增加的临时buff信息 map<buff唯一Id,结束时间戳-单位毫秒>
	map<int32,int64> MapFoodAdditionAttribute	    = 26;  //食物属性加成信息 map<属性类型,属性值>
	
	MsgSparInfo InBornSparInfo						= 27;  //天生能力晶石信息,是否生效取决于宠物天生能力晶石槽位是否解锁(也就是说槽位没有解锁也会发下来)

	int32 FeedCount                                 = 28;  //喂养次数
	map<int32,bool> PetPropertyInfo					= 29;  //宠物词条信息 map<词条Id,是否是打书的词条>
	int32 SpiritLevel								= 30;  //宠物灵阶
}

// 宠物基础数据
message PetBaseInfo {
    uint64  PetObjId        = 1; // 宠物唯一Id
	int32   PetCfgId        = 2; // 宠物ConfigId
	int32   Level           = 3; // 等级
	int32   Quality         = 4; // 品质
	int32   BloodlineLevel  = 5; // 血统幻能等级
	int32 EquipIndex		= 6; // 宠物上阵位置
}

message AttributeInfo {
    int32 AttributeType  = 1;  //属性类型
    int64 AttributeValue = 2;  //属性值
}

message AttrChange {
    int64 ChangeValue = 1;  //修改的实数值
    int32 ChangeRatio = 2;  //修改的万分比
}

message BuffInfo {
    uint64 ObjectId                              = 1;   // buff被施加者ID
    uint64 CastId                                = 2;   // buff施加者ID
    int32 CastType                               = 3;   // buff施加者类型
    uint64 Id                                    = 4;   //服务器生成的buff随机唯一ID
    uint32 BuffKey                               = 5;   // buff配置中的BuffKey
    int64 StartTime                              = 6;   //开始时间-毫秒级时间戳
    int32 TableStatus                            = 7;   //0正常命中 1免疫 2抵抗
    int64 Duration                               = 8;   //持续时间ms
    int32 AccumulationCount                      = 9;   //层数
    map<int32, AttrChange> BuffAttrChangeMap     = 10;  //属性变化——仅在受被动影响时有
    map<int32, int64> CasterAttrAdditionMap      = 11;  //释放者额外增加属性 map[属性类型]属性值
}

message RemoveBuffInfo {
    uint64 ObjectId    = 1;  // buff被施加者ID
    repeated uint64 Id = 2;  //服务器生成的buff随机唯一ID
}

message TalentPointInfo {
    uint64 EquipmentId = 1;  //装备的唯一ID，若0表示公用天赋点
    int32 Count        = 2;  //数量——总量
}

//宠物等级信息
message PetLevelInfo {
	uint64 PetId                         = 1;  //宠物ID
    map<int32, int64> MapUpdateAttribute = 2;  //宠物属性更新,等级和经验不是差值
	int64 AddExp			     		 = 3;  //增加的经验
}

//宠物心情信息
//message PetMoodNotifyInfo {
//    uint64 PetId                         = 1;  //宠物ID
//    uint32 Mood                          = 2;  //宠物心情
//}

//能量
message EnergyInfo {
    int32 Energy                            = 1;  //能量
    int64 LastEnergyRecoveryTime            = 2;  //能量最后恢复时间
}

// DropGoodsInfo
message NotifyItemInfo {
    int32 GoodsType							= 1;  //掉落类型 参见keywords-GoodsTypeEnum
    ItemInfo Item           				= 2;  //掉落的道具
    AttributeInfo Attribute 				= 3;  //掉落的属性
    PetInfo Pet             				= 4;  //掉落的宠物
    TalentPointInfo Talent  				= 5;  //掉落的加点天赋点
    repeated int32 Task     				= 6;  //掉落的任务
	repeated PetLevelInfo PetLevel  		= 7;  //宠物等级信息,当GoodsType为属性,AttributeType为宠物经验时需要处理这条
	repeated PetIntimateInfo PetIntimate	= 8;  //宠物添加亲密度后的信息
	//repeated PetMoodNotifyInfo PetMood      = 9;  //宠物添加心情后信息
	EnergyInfo Energy                       = 10; //能量
	int32 ActionId							= 11; //营地动作
	int32 CookbookId						= 12; //食谱Id
}

message StuffPosData {
    int32 StuffId = 1;
    int32 PosID   = 2;
}

message UserMailData {
    string MailId                      = 1;  //邮件id
    bool IsPublicMail                  = 2;  //是否为全服邮件
    uint64 FromUser                    = 3;  //发送方User的ID
    string Title                       = 4;  //邮件标题
    string Content                     = 5;  //邮件内容
    repeated GoodsInfo ItemAttachments = 6;  //道具附件
    int64 SendTime                     = 7;  //发送时间戳
    int64 ExpirationTime               = 8;  //过期时间戳
    int32 Status                       = 9;  //邮件状态
    int32 MailType                     = 10; //邮件类型 对应keywords中EMailType
    uint64 MailOrder                   = 11; //流水：1）当为系统邮件时，表示邮件的配置ID 2）当为GM邮件时，表示发送GM邮件时GM后台产生的邮件ID 3）当为问卷调查邮件时，表示问卷调查ID
    int32 ShowParamType                = 12; //内容显示的附加类型
    repeated string ShowParams	       = 13; //内容显示的附加参数
}

//玩家基础信息
message UserBaseInfo {
	uint64 PlayerId			= 1;  //玩家ID
	string PlayerName		= 2;  //玩家名字
	int32  PlayerLevel		= 3;  //玩家等级
	uint64 GuildId			= 4;  //玩家公会Id
	string GuildName		= 5;  //玩家公会名
	string GuildIcon		= 6;  //玩家公会Icon
	int32  Position			= 7;  //玩家在公会的职位 对应keyowords中EGuildPositionType
	int32  ArenaMaxRange	= 8;  //玩家竞技场历史最高段位.最大大段,对应keywords中EArenaRange
	int32  ArenaMaxNodeId	= 9;  //玩家竞技场历史最高段位.最大小段
	int32 HomeTaskChapterId = 10; //神树目标章节(信仰等级)
}

message AdditionalSp {
    int32 ReplyMode     = 1;    //回复模式——参考keywords中的ESPReplyMode
    int32 ReplySpValue  = 2;    //回复的sp值
    int32 SkillId       = 3;    //触发的skill id
}

enum LoginType {
    Gust     = 0;
    Account  = 1;
    TapTap   = 2;
    Facebook = 3;
    Google   = 4;
    Fusion   = 5;

    LoginType_Max = 6;
}

message DynamicBlockPosInfo {
    uint32  Dir                 = 1;                    //方向角度0-360
    int32   PosX                = 2;
    int32   PosY                = 3;
    int32   StuffId             = 4;                    //物件Id
}

message PublicEnterMapResData {
    int32 PosX                      = 1;
    int32 PosY                      = 2;
    uint32 Weather                  = 3;     //地图天气
    int64 WeatherEndTime            = 4;     //地图天气结束时间戳 0表示永久
    int32 MusicId                   = 5;     //音乐Id
    uint64 MapId                    = 6;     //地图ID
    int64 PlayerNowHp               = 7;     //玩家当前血量
    int32 PlayerLifeStatus          = 8;     //玩家当前死亡存活状态
    int32 Dir                       = 9;     //面向
    int64 MapStartTime              = 10;    //地图开始时间
    int64 LastManaReplyTime         = 11;    //最后mana恢复时间
    int64 PlayerNowMana             = 12;    //当前Mana
    int64 NowBrawn                  = 13;    //当前体力
	int64 ClientAiResumeTime        = 14;    //恢复客户端AI时间
	int32 ChoiceEffectIndex         = 15;    //选择的能力的index,从0开始,未选择为-1
	bool MapStarted                 = 16;    //地图是否已经开始
	int32 ReviveCount				= 17;    //当前复活次数
	uint64 RivalRealPlayerId        = 18;    //对手真实ID
	uint64 RivalPlayerObjectId      = 19;    //对手玩家对象ID
}

message GameTimeItem {
    int32 Hour		= 1;  // 游戏时间 小时
	int32 Minute	= 2;  // 分钟
	int32 Second	= 3;  // 秒
}

message SellItem {
    uint64 Id       = 1;  //道具唯一ID
    int32 SellCount = 2;  //出售数量
}

message EquipSlot {
    int32 EquipSlotId       = 1; //装备槽位ID
    int32 EquipSlotLevel    = 2; //装备槽位等级
}

message SurpriseData {
	int32 SurpriseCfgId = 1;        //惊喜/意外配置ID
	int32 SubUseCount   = 2;        //剩余使用次数
	int64 StartTime     = 3;        //开始时间-ms
}

message SurpriseTalkData {
    int32 TalkId = 1; //对话ID
    int32 Count  = 2; //个数
}

message HomeBuildInfo {
    uint64 HomeBuildingId       = 1; //建筑唯一ID
    int32  HomeBuildingCfgId    = 2; //建筑配置ID
    int32  HomeBuildingLevel    = 3; //建筑等级
    int32  PosX                 = 4; //建筑位置X
    int32  PosY                 = 5; //建筑位置Y
    uint32 PlotId               = 6; //所属建筑用地
    int64  StartLevelUpTime     = 7; //开始升级的时间

    //当HomeBuildingLevel>ReceiveLevelReward 若StartLevelUpTime不为0,HomeBuildingLevel需要-1处理
    //需要客户端自行判断下,是否有升级奖励,没有的话就不发消息了
    int32  ReceiveLevelReward   = 8; //已经领取升级奖励的等级——递增

    //以下为惊喜相关——ps:客户端看看，哪些不需要
    int32 SurpriseCount                         = 9; //今天惊喜产生的次数
    int32 AccidentCount                         = 10; //今天意外产生的次数
    repeated SurpriseTalkData SurpriseTalkList  = 11; //尚未处理的惊喜/意外对话ID列表
    repeated SurpriseData SurpriseAccidentList  = 12; //生效的惊喜/意外ID列表
}

message DrawPetInfo {
    int32 RemainCount = 1; // 剩余抽卡次数 
}

//NotifyDailyRefresh 通知每日刷新
message MsgNotifyDailyRefresh {
	bool RefreshWeekTask				= 1;  //是否刷新每周任务 true刷新 false不刷新
	int32 OnlineAwardType				= 2;  //下一次领取在线时长奖励类型
	int64 OnlineAwardStartTime			= 3;  //在线时长奖励开始时间 单位:毫秒
}

// 玩家战斗统计数据
message FightStaticData {
	int32 PetId = 1;    // 如果是玩家这个是0 如果是宠物这个是PetConfigId
	int32 Level	= 2;
	int64 Damage = 3;       // 造成的伤害值（累积）
	int64 BearDamage = 4;   // 承担伤害值（累积）
	int64 Treated = 5;      // 治疗量（累积）
	bool  IsDeath = 6;      // 是否死亡 true死亡 false没死
	int64 DamageMax = 7;       // 造成的伤害值（最大）
	int64 BearDamageMax = 8;   // 承担伤害值（最大）
	int64 TreatedMax = 9;      // 治疗量（最大）
	int32 BloodlineLevel	= 10; // 血统等级
	int64 BattleScore = 11; // 战力
	uint64 ObjId	= 12;  //玩家/宠物唯一ID
	int64 KillNormal 	= 13;  //累积杀普通怪
	int64 KillElite 	= 14;  //累积杀精英怪
	int64 KillBoss 	= 15;  //累积杀boss怪
	int64 LinkSkillAttackCount 	= 16;  //连携技能击中次数
	bool IsAssist = 17; // 是否是连携
}

message PlayerFightStaticData {
	uint64 PlayerUid = 1;
	repeated FightStaticData StaticList = 2;
}

//释放技能消耗的HP数据
message SkillCostHpData {
    uint64 CostObjId        = 1; //消耗HP的对象ID
    int64  CostHp           = 2; //消耗的HP值
    int64  NowHp            = 3; //当前HP值
    int64  LastReplayHpTime = 4; //回复血量时间戳MS
}

//能力晶石数据
message MsgSparInfo {
	int32 SparId						= 1;  //能力晶石配置ID
	int32 SparStar						= 2;  //能力晶石星级 0级开始
	int32 EquipObjType					= 3;  //穿戴此能力晶石的对象,只能是玩家或者宠物 对应keyword中的EObjectType枚举 天生晶石此数据无效
	uint64 EquipObjId					= 4;  //穿戴此能力晶石的玩家/宠物唯一id 为0表示没有被穿戴 天生晶石此数据无效
	int32 EquipPos						= 5;  //穿戴位置 玩家从0开始，宠物从1开始 天生晶石此数据无效
}